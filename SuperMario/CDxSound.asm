; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\Administrator\Documents\Visual Studio 2010\Projects\SuperMario__\SuperMario_\SuperMario\CDxSound.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4CWave@@6B@					; CWave::`RTTI Complete Object Locator'
PUBLIC	??_R3CWave@@8					; CWave::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWave@@8					; CWave::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWave@@8				; CWave::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWave@@@8				; CWave `RTTI Type Descriptor'
PUBLIC	??CCDxSound@@QAEPAUIDirectSound@@XZ		; CDxSound::operator->
PUBLIC	?GetFormat@CWave@@QAEPAUtWAVEFORMATEX@@XZ	; CWave::GetFormat
PUBLIC	?CkSize@CWave@@QBEKXZ				; CWave::CkSize
PUBLIC	??_GCWave@@UAEPAXI@Z				; CWave::`scalar deleting destructor'
PUBLIC	??_7CWave@@6B@					; CWave::`vftable'
EXTRN	__imp__DirectSoundCreate@12:PROC
EXTRN	??_ECWave@@UAEPAXI@Z:PROC			; CWave::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp__mmioOpenA@12:PROC
EXTRN	__imp__mmioAscend@12:PROC
EXTRN	__imp__mmioSeek@12:PROC
EXTRN	__imp__mmioDescend@16:PROC
EXTRN	__imp__mmioRead@12:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__mmioClose@8:PROC
;	COMDAT ??_7CWave@@6B@
CONST	SEGMENT
??_7CWave@@6B@ DD FLAT:??_R4CWave@@6B@			; CWave::`vftable'
	DD	FLAT:??_ECWave@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CWave@@6B@
rdata$r	SEGMENT
??_R4CWave@@6B@ DD 00H					; CWave::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWave@@@8
	DD	FLAT:??_R3CWave@@8
rdata$r	ENDS
;	COMDAT ??_R3CWave@@8
rdata$r	SEGMENT
??_R3CWave@@8 DD 00H					; CWave::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWave@@8
rdata$r	ENDS
;	COMDAT ??_R2CWave@@8
rdata$r	SEGMENT
??_R2CWave@@8 DD FLAT:??_R1A@?0A@EA@CWave@@8		; CWave::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWave@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWave@@8 DD FLAT:??_R0?AVCWave@@@8	; CWave::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWave@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWave@@@8
_DATA	SEGMENT
??_R0?AVCWave@@@8 DD FLAT:??_7type_info@@6B@		; CWave `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWave@@', 00H
PUBLIC	?Close@CWave@@QAE_NXZ				; CWave::Close
; Function compile flags: /Ogtp
;	COMDAT ?Close@CWave@@QAE_NXZ
_TEXT	SEGMENT
?Close@CWave@@QAE_NXZ PROC				; CWave::Close, COMDAT
; _this$ = eax
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cdxsound.cpp
; Line 289
	push	esi
	mov	esi, eax
; Line 290
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
; Line 291
	mov	DWORD PTR [esi+4], 0
; Line 293
	mov	esi, DWORD PTR [esi+8]
	add	esp, 4
	test	esi, esi
	je	SHORT $LN1@Close
; Line 294
	push	0
	push	esi
	call	DWORD PTR __imp__mmioClose@8
	neg	eax
	sbb	eax, eax
	inc	eax
	pop	esi
; Line 297
	ret	0
$LN1@Close:
; Line 296
	mov	al, 1
	pop	esi
; Line 297
	ret	0
?Close@CWave@@QAE_NXZ ENDP				; CWave::Close
_TEXT	ENDS
PUBLIC	?Read@CWave@@QAE_NKPAXPAK@Z			; CWave::Read
; Function compile flags: /Ogtp
;	COMDAT ?Read@CWave@@QAE_NKPAXPAK@Z
_TEXT	SEGMENT
?Read@CWave@@QAE_NKPAXPAK@Z PROC			; CWave::Read, COMDAT
; _this$ = edx
; _size$ = eax
; _data$ = ecx
; _nread$ = esi
; Line 281
	push	eax
	mov	DWORD PTR [esi], 0
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	push	eax
	call	DWORD PTR __imp__mmioRead@12
; Line 282
	cmp	eax, -1
	jne	SHORT $LN1@Read
	xor	al, al
; Line 285
	ret	0
$LN1@Read:
; Line 283
	mov	DWORD PTR [esi], eax
; Line 284
	mov	al, 1
; Line 285
	ret	0
?Read@CWave@@QAE_NKPAXPAK@Z ENDP			; CWave::Read
_TEXT	ENDS
PUBLIC	?StartRead@CWave@@QAE_NXZ			; CWave::StartRead
; Function compile flags: /Ogtp
;	COMDAT ?StartRead@CWave@@QAE_NXZ
_TEXT	SEGMENT
?StartRead@CWave@@QAE_NXZ PROC				; CWave::StartRead, COMDAT
; _this$ = esi
; Line 266
	mov	eax, DWORD PTR [esi+44]
	mov	ecx, DWORD PTR [esi+8]
	push	0
	add	eax, 4
	push	eax
	push	ecx
	call	DWORD PTR __imp__mmioSeek@12
	cmp	eax, -1
	jne	SHORT $LN2@StartRead
; Line 267
	xor	al, al
; Line 275
	ret	0
$LN2@StartRead:
; Line 272
	push	16					; 00000010H
	lea	edx, DWORD PTR [esi+32]
	lea	eax, DWORD PTR [esi+12]
	push	edx
	push	eax
	mov	DWORD PTR [eax], 1635017060		; 61746164H
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	DWORD PTR __imp__mmioDescend@16
	test	eax, eax
	sete	al
; Line 275
	ret	0
?StartRead@CWave@@QAE_NXZ ENDP				; CWave::StartRead
_TEXT	ENDS
PUBLIC	?Open@CWave@@QAE_NPBD@Z				; CWave::Open
; Function compile flags: /Ogtp
;	COMDAT ?Open@CWave@@QAE_NPBD@Z
_TEXT	SEGMENT
?Open@CWave@@QAE_NPBD@Z PROC				; CWave::Open, COMDAT
; _this$ = esi
; Line 234
	mov	eax, DWORD PTR [esi+8]
	push	ebx
	push	0
	push	0
	lea	ebx, DWORD PTR [esi+32]
	push	ebx
	push	eax
	call	DWORD PTR __imp__mmioDescend@16
	test	eax, eax
	je	SHORT $LN8@Open
$LN6@Open:
; Line 235
	xor	al, al
	pop	ebx
; Line 261
	ret	0
$LN8@Open:
; Line 239
	cmp	DWORD PTR [ebx], 1179011410		; 46464952H
	jne	SHORT $LN6@Open
	cmp	DWORD PTR [esi+40], 1163280727		; 45564157H
	jne	SHORT $LN6@Open
; Line 244
	mov	ecx, DWORD PTR [esi+8]
	push	edi
	push	16					; 00000010H
	push	ebx
	lea	edi, DWORD PTR [esi+12]
	push	edi
	push	ecx
	mov	DWORD PTR [edi], 544501094		; 20746d66H
	call	DWORD PTR __imp__mmioDescend@16
	test	eax, eax
; Line 245
	jne	SHORT $LN17@Open
; Line 248
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN17@Open
; Line 250
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR [esi+4], eax
; Line 251
	test	eax, eax
	je	SHORT $LN17@Open
; Line 254
	mov	edx, DWORD PTR [esi+16]
	push	edx
	push	eax
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	DWORD PTR __imp__mmioRead@12
	cmp	eax, DWORD PTR [esi+16]
	je	SHORT $LN2@Open
$LN17@Open:
	pop	edi
; Line 255
	xor	al, al
	pop	ebx
; Line 261
	ret	0
$LN2@Open:
; Line 258
	mov	ecx, DWORD PTR [esi+8]
	push	0
	push	edi
	push	ecx
	call	DWORD PTR __imp__mmioAscend@12
	test	eax, eax
	pop	edi
	sete	al
	pop	ebx
; Line 261
	ret	0
?Open@CWave@@QAE_NPBD@Z ENDP				; CWave::Open
_TEXT	ENDS
PUBLIC	??1CWave@@UAE@XZ				; CWave::~CWave
; Function compile flags: /Ogtp
;	COMDAT ??1CWave@@UAE@XZ
_TEXT	SEGMENT
??1CWave@@UAE@XZ PROC					; CWave::~CWave, COMDAT
; _this$ = ecx
; Line 222
	push	esi
	mov	esi, ecx
; Line 223
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	DWORD PTR [esi], OFFSET ??_7CWave@@6B@
	call	??3@YAXPAX@Z				; operator delete
	mov	DWORD PTR [esi+4], 0
	mov	esi, DWORD PTR [esi+8]
	add	esp, 4
	test	esi, esi
	je	SHORT $LN3@CWave
	push	0
	push	esi
	call	DWORD PTR __imp__mmioClose@8
$LN3@CWave:
	pop	esi
; Line 224
	ret	0
??1CWave@@UAE@XZ ENDP					; CWave::~CWave
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GCWave@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWave@@UAEPAXI@Z PROC				; CWave::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	push	eax
	mov	DWORD PTR [esi], OFFSET ??_7CWave@@6B@
	call	??3@YAXPAX@Z				; operator delete
	mov	eax, DWORD PTR [esi+8]
	add	esp, 4
	mov	DWORD PTR [esi+4], 0
	test	eax, eax
	je	SHORT $LN6@scalar@4
	push	0
	push	eax
	call	DWORD PTR __imp__mmioClose@8
$LN6@scalar@4:
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN9@scalar@4
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN9@scalar@4:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GCWave@@UAEPAXI@Z ENDP				; CWave::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CWave@@QAE@XZ				; CWave::CWave
; Function compile flags: /Ogtp
;	COMDAT ??0CWave@@QAE@XZ
_TEXT	SEGMENT
??0CWave@@QAE@XZ PROC					; CWave::CWave, COMDAT
; _this$ = eax
; Line 219
	xor	ecx, ecx
	mov	DWORD PTR [eax], OFFSET ??_7CWave@@6B@
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0CWave@@QAE@XZ ENDP					; CWave::CWave
_TEXT	ENDS
PUBLIC	?Restore@CDxSoundBuffer@@QAEJXZ			; CDxSoundBuffer::Restore
; Function compile flags: /Ogtp
;	COMDAT ?Restore@CDxSoundBuffer@@QAEJXZ
_TEXT	SEGMENT
?Restore@CDxSoundBuffer@@QAEJXZ PROC			; CDxSoundBuffer::Restore, COMDAT
; _this$ = eax
; Line 209
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN1@Restore
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+80]
	push	eax
	call	edx
; Line 211
	ret	0
$LN1@Restore:
; Line 210
	xor	eax, eax
; Line 211
	ret	0
?Restore@CDxSoundBuffer@@QAEJXZ ENDP			; CDxSoundBuffer::Restore
_TEXT	ENDS
PUBLIC	?Release@CDxSoundBuffer@@QAEJXZ			; CDxSoundBuffer::Release
; Function compile flags: /Ogtp
;	COMDAT ?Release@CDxSoundBuffer@@QAEJXZ
_TEXT	SEGMENT
?Release@CDxSoundBuffer@@QAEJXZ PROC			; CDxSoundBuffer::Release, COMDAT
; _this$ = esi
; Line 200
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN4@Release
	mov	eax, DWORD PTR [ecx]
	push	ecx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
; Line 201
	mov	DWORD PTR [esi], 0
; Line 203
	ret	0
$LN4@Release:
; Line 201
	mov	DWORD PTR [esi], eax
; Line 203
	ret	0
?Release@CDxSoundBuffer@@QAEJXZ ENDP			; CDxSoundBuffer::Release
_TEXT	ENDS
PUBLIC	??1CDxSoundBuffer@@QAE@XZ			; CDxSoundBuffer::~CDxSoundBuffer
; Function compile flags: /Ogtp
;	COMDAT ??1CDxSoundBuffer@@QAE@XZ
_TEXT	SEGMENT
??1CDxSoundBuffer@@QAE@XZ PROC				; CDxSoundBuffer::~CDxSoundBuffer, COMDAT
; _this$ = eax
; Line 67
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN1@CDxSoundBu
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN1@CDxSoundBu:
; Line 68
	ret	0
??1CDxSoundBuffer@@QAE@XZ ENDP				; CDxSoundBuffer::~CDxSoundBuffer
_TEXT	ENDS
PUBLIC	??0CDxSoundBuffer@@QAE@XZ			; CDxSoundBuffer::CDxSoundBuffer
; Function compile flags: /Ogtp
;	COMDAT ??0CDxSoundBuffer@@QAE@XZ
_TEXT	SEGMENT
??0CDxSoundBuffer@@QAE@XZ PROC				; CDxSoundBuffer::CDxSoundBuffer, COMDAT
; _this$ = eax
; Line 62
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	ret	0
??0CDxSoundBuffer@@QAE@XZ ENDP				; CDxSoundBuffer::CDxSoundBuffer
_TEXT	ENDS
PUBLIC	?ReleaseAll@CDxSound@@QAEXXZ			; CDxSound::ReleaseAll
; Function compile flags: /Ogtp
;	COMDAT ?ReleaseAll@CDxSound@@QAEXXZ
_TEXT	SEGMENT
?ReleaseAll@CDxSound@@QAEXXZ PROC			; CDxSound::ReleaseAll, COMDAT
; Line 38
	mov	ecx, DWORD PTR ?ds@@3VCDxSound@@A
	test	ecx, ecx
	je	SHORT $LN1@ReleaseAll
; Line 39
	mov	eax, DWORD PTR ?ds@@3VCDxSound@@A+4
	test	eax, eax
	je	SHORT $LN4@ReleaseAll
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	ecx, DWORD PTR ?ds@@3VCDxSound@@A
$LN4@ReleaseAll:
	mov	DWORD PTR ?ds@@3VCDxSound@@A+4, 0
; Line 40
	mov	eax, DWORD PTR [ecx]
	push	ecx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
; Line 41
	mov	DWORD PTR ?ds@@3VCDxSound@@A, 0
$LN1@ReleaseAll:
; Line 43
	ret	0
?ReleaseAll@CDxSound@@QAEXXZ ENDP			; CDxSound::ReleaseAll
_TEXT	ENDS
PUBLIC	??1CDxSound@@QAE@XZ				; CDxSound::~CDxSound
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDxSound@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDxSound@@QAE@XZ$0
__ehfuncinfo$??1CDxSound@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDxSound@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1CDxSound@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDxSound@@QAE@XZ PROC				; CDxSound::~CDxSound, COMDAT
; Line 16
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDxSound@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], OFFSET ?ds@@3VCDxSound@@A ; ds
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 17
	mov	ecx, DWORD PTR ?ds@@3VCDxSound@@A
	test	ecx, ecx
	je	SHORT $LN4@CDxSound
	mov	eax, DWORD PTR ?ds@@3VCDxSound@@A+4
	test	eax, eax
	je	SHORT $LN7@CDxSound
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	ecx, DWORD PTR ?ds@@3VCDxSound@@A
$LN7@CDxSound:
	mov	DWORD PTR ?ds@@3VCDxSound@@A+4, 0
	mov	eax, DWORD PTR [ecx]
	push	ecx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	DWORD PTR ?ds@@3VCDxSound@@A, 0
$LN4@CDxSound:
; Line 18
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR ?ds@@3VCDxSound@@A+4
	test	eax, eax
	je	SHORT $LN10@CDxSound
	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN10@CDxSound:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDxSound@@QAE@XZ$0:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	jmp	??1CDxSoundBuffer@@QAE@XZ		; CDxSoundBuffer::~CDxSoundBuffer
__ehhandler$??1CDxSound@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDxSound@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDxSound@@QAE@XZ ENDP				; CDxSound::~CDxSound
PUBLIC	??0CDxSound@@QAE@XZ				; CDxSound::CDxSound
; Function compile flags: /Ogtp
;	COMDAT ??0CDxSound@@QAE@XZ
_TEXT	SEGMENT
??0CDxSound@@QAE@XZ PROC				; CDxSound::CDxSound, COMDAT
; Line 10
	xor	eax, eax
	mov	DWORD PTR ?ds@@3VCDxSound@@A+4, eax
	mov	DWORD PTR ?ds@@3VCDxSound@@A+8, eax
	mov	DWORD PTR ?ds@@3VCDxSound@@A+12, eax
	mov	DWORD PTR ?ds@@3VCDxSound@@A+16, eax
; Line 11
	mov	DWORD PTR ?ds@@3VCDxSound@@A, eax
; Line 12
	mov	eax, OFFSET ?ds@@3VCDxSound@@A		; ds
	ret	0
??0CDxSound@@QAE@XZ ENDP				; CDxSound::CDxSound
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?CkSize@CWave@@QBEKXZ
_TEXT	SEGMENT
?CkSize@CWave@@QBEKXZ PROC				; CWave::CkSize, COMDAT
; _this$ = eax
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cdxsound.h
; Line 98
	mov	eax, DWORD PTR [eax+16]
	ret	0
?CkSize@CWave@@QBEKXZ ENDP				; CWave::CkSize
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetFormat@CWave@@QAEPAUtWAVEFORMATEX@@XZ
_TEXT	SEGMENT
?GetFormat@CWave@@QAEPAUtWAVEFORMATEX@@XZ PROC		; CWave::GetFormat, COMDAT
; _this$ = eax
; Line 96
	mov	eax, DWORD PTR [eax+4]
	ret	0
?GetFormat@CWave@@QAEPAUtWAVEFORMATEX@@XZ ENDP		; CWave::GetFormat
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??CCDxSound@@QAEPAUIDirectSound@@XZ
_TEXT	SEGMENT
??CCDxSound@@QAEPAUIDirectSound@@XZ PROC		; CDxSound::operator->, COMDAT
; Line 71
	mov	eax, DWORD PTR ?ds@@3VCDxSound@@A
	ret	0
??CCDxSound@@QAEPAUIDirectSound@@XZ ENDP		; CDxSound::operator->
PUBLIC	__$ArrayPad$
PUBLIC	?CreateMainBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@H@Z ; CDxSoundBuffer::CreateMainBuffer
; Function compile flags: /Ogtp
;	COMDAT ?CreateMainBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@H@Z
_TEXT	SEGMENT
_dsbd$ = -60						; size = 36
_wfex$ = -24						; size = 18
__$ArrayPad$ = -4					; size = 4
?CreateMainBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@H@Z PROC ; CDxSoundBuffer::CreateMainBuffer, COMDAT
; _this$ = ecx
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cdxsound.cpp
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 105
	xor	eax, eax
	push	esi
	mov	DWORD PTR _dsbd$[ebp+8], eax
	mov	DWORD PTR _dsbd$[ebp+16], eax
; Line 116
	push	0
	mov	esi, ecx
	mov	DWORD PTR _dsbd$[ebp], eax
	mov	DWORD PTR _dsbd$[ebp+4], eax
	mov	DWORD PTR _dsbd$[ebp+12], eax
	mov	DWORD PTR _dsbd$[ebp+20], eax
	mov	DWORD PTR _dsbd$[ebp+24], eax
	mov	DWORD PTR _dsbd$[ebp+28], eax
	mov	DWORD PTR _dsbd$[ebp+32], eax
	mov	DWORD PTR _dsbd$[ebp+8], eax
	mov	DWORD PTR _dsbd$[ebp+16], eax
	mov	eax, DWORD PTR ?ds@@3VCDxSound@@A
	push	esi
	lea	edx, DWORD PTR _dsbd$[ebp]
	mov	DWORD PTR _dsbd$[ebp], 36		; 00000024H
	mov	DWORD PTR _dsbd$[ebp+4], 193		; 000000c1H
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
; Line 117
	test	eax, eax
	jns	SHORT $LN2@CreateMain
$LN7@CreateMain:
	xor	al, al
	pop	esi
; Line 141
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@CreateMain:
; Line 121
	xor	eax, eax
	mov	DWORD PTR _wfex$[ebp], eax
	mov	DWORD PTR _wfex$[ebp+4], eax
	mov	DWORD PTR _wfex$[ebp+8], eax
	mov	DWORD PTR _wfex$[ebp+12], eax
	mov	WORD PTR _wfex$[ebp+16], ax
; Line 132
	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR _wfex$[ebp]
	mov	DWORD PTR _wfex$[ebp], 131073		; 00020001H
	mov	DWORD PTR _wfex$[ebp+4], 22050		; 00005622H
	mov	DWORD PTR _wfex$[ebp+8], 88200		; 00015888H
	mov	DWORD PTR _wfex$[ebp+12], 1048580	; 00100004H
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+56]
	push	ecx
	push	eax
	call	edx
; Line 133
	test	eax, eax
	js	SHORT $LN7@CreateMain
; Line 136
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [esi+4]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+24]
	call	eax
; Line 137
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [esi+8]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+28]
	call	eax
; Line 138
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	add	esi, 12					; 0000000cH
	push	esi
	push	eax
	call	edx
; Line 141
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	mov	al, 1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateMainBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@H@Z ENDP ; CDxSoundBuffer::CreateMainBuffer
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?CreateBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@PAUtWAVEFORMATEX@@H@Z ; CDxSoundBuffer::CreateBuffer
; Function compile flags: /Ogtp
;	COMDAT ?CreateBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@PAUtWAVEFORMATEX@@H@Z
_TEXT	SEGMENT
_dsbd$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_size$ = 8						; size = 4
?CreateBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@PAUtWAVEFORMATEX@@H@Z PROC ; CDxSoundBuffer::CreateBuffer, COMDAT
; _this$ = edx
; _format$ = ecx
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 75
	xor	eax, eax
	push	esi
	mov	DWORD PTR _dsbd$[ebp], eax
	mov	DWORD PTR _dsbd$[ebp+4], eax
	mov	DWORD PTR _dsbd$[ebp+8], eax
	mov	DWORD PTR _dsbd$[ebp+16], eax
	mov	DWORD PTR _dsbd$[ebp+12], eax
	mov	DWORD PTR _dsbd$[ebp+20], eax
	mov	DWORD PTR _dsbd$[ebp+24], eax
	mov	DWORD PTR _dsbd$[ebp+28], eax
	mov	DWORD PTR _dsbd$[ebp+32], eax
; Line 85
	mov	eax, DWORD PTR _size$[ebp]
; Line 89
	push	0
	mov	esi, edx
	mov	DWORD PTR _dsbd$[ebp+8], eax
	mov	eax, DWORD PTR ?ds@@3VCDxSound@@A
	push	esi
	lea	edx, DWORD PTR _dsbd$[ebp]
	mov	DWORD PTR _dsbd$[ebp], 36		; 00000024H
	mov	DWORD PTR _dsbd$[ebp+4], 98784		; 000181e0H
	mov	DWORD PTR _dsbd$[ebp+16], ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
; Line 90
	test	eax, eax
	jns	SHORT $LN1@CreateBuff
	xor	al, al
	pop	esi
; Line 98
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
$LN1@CreateBuff:
; Line 93
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [esi+4]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+24]
	call	eax
; Line 94
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [esi+8]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+28]
	call	eax
; Line 95
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	add	esi, 12					; 0000000cH
	push	esi
	push	eax
	call	edx
; Line 98
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	mov	al, 1
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?CreateBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@PAUtWAVEFORMATEX@@H@Z ENDP ; CDxSoundBuffer::CreateBuffer
_TEXT	ENDS
PUBLIC	?CreateDS@CDxSound@@QAE_NPAUHWND__@@H@Z		; CDxSound::CreateDS
; Function compile flags: /Ogtp
;	COMDAT ?CreateDS@CDxSound@@QAE_NPAUHWND__@@H@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
?CreateDS@CDxSound@@QAE_NPAUHWND__@@H@Z PROC		; CDxSound::CreateDS, COMDAT
; Line 22
	push	ebp
	mov	ebp, esp
; Line 24
	push	0
	push	OFFSET ?ds@@3VCDxSound@@A		; ds
	push	0
	call	DWORD PTR __imp__DirectSoundCreate@12
; Line 25
	test	eax, eax
	jns	SHORT $LN2@CreateDS
$LN5@CreateDS:
	xor	al, al
; Line 33
	pop	ebp
	ret	4
$LN2@CreateDS:
; Line 28
	mov	eax, DWORD PTR ?ds@@3VCDxSound@@A
	mov	edx, DWORD PTR _hWnd$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+24]
	call	eax
; Line 29
	test	eax, eax
	js	SHORT $LN5@CreateDS
; Line 32
	mov	ecx, OFFSET ?ds@@3VCDxSound@@A+4
	call	?CreateMainBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@H@Z ; CDxSoundBuffer::CreateMainBuffer
; Line 33
	pop	ebp
	ret	4
?CreateDS@CDxSound@@QAE_NPAUHWND__@@H@Z ENDP		; CDxSound::CreateDS
PUBLIC	__$ArrayPad$
PUBLIC	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z$0
__ehfuncinfo$?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z
_TEXT	SEGMENT
_bytes2$ = -84						; size = 4
_ptr1$ = -80						; size = 4
_ptr2$ = -76						; size = 4
_bytes1$ = -72						; size = 4
_file$ = -68						; size = 52
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z PROC	; CDxSoundBuffer::LoadWave, COMDAT
; _this$ = edi
; Line 145
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _path$[ebp]
; Line 146
	xor	ebx, ebx
	mov	DWORD PTR _file$[ebp], OFFSET ??_7CWave@@6B@
	mov	DWORD PTR _file$[ebp+4], ebx
	mov	DWORD PTR _file$[ebp+8], ebx
; Line 147
	push	65536					; 00010000H
	push	ebx
	push	eax
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	call	DWORD PTR __imp__mmioOpenA@12
	mov	DWORD PTR _file$[ebp+8], eax
	cmp	eax, ebx
	je	$LN70@LoadWave
	lea	esi, DWORD PTR _file$[ebp]
	call	?Open@CWave@@QAE_NPBD@Z			; CWave::Open
	test	al, al
	je	$LN70@LoadWave
	mov	eax, DWORD PTR _file$[ebp+44]
	mov	ecx, DWORD PTR _file$[ebp+8]
	push	ebx
	add	eax, 4
	push	eax
	push	ecx
	call	DWORD PTR __imp__mmioSeek@12
	or	esi, -1
	cmp	eax, esi
	je	$LN10@LoadWave
	mov	ecx, DWORD PTR _file$[ebp+8]
	push	16					; 00000010H
	lea	edx, DWORD PTR _file$[ebp+32]
	push	edx
	lea	eax, DWORD PTR _file$[ebp+12]
	push	eax
	push	ecx
	mov	DWORD PTR _file$[ebp+12], 1635017060	; 61746164H
	call	DWORD PTR __imp__mmioDescend@16
	test	eax, eax
	jne	$LN10@LoadWave
; Line 149
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $LN41@LoadWave
	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN41@LoadWave:
; Line 152
	mov	ecx, DWORD PTR _file$[ebp+16]
	push	ecx
	mov	ecx, DWORD PTR _file$[ebp+4]
	mov	edx, edi
	mov	DWORD PTR [edi], ebx
	call	?CreateBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@PAUtWAVEFORMATEX@@H@Z ; CDxSoundBuffer::CreateBuffer
	test	al, al
	jne	SHORT $LN9@LoadWave
; Line 153
	mov	DWORD PTR __$EHRec$[ebp+8], esi
	mov	edx, DWORD PTR _file$[ebp+4]
	push	edx
	jmp	$LN76@LoadWave
$LN9@LoadWave:
; Line 160
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _bytes2$[ebp]
	push	edx
	lea	edx, DWORD PTR _ptr2$[ebp]
	push	edx
	lea	edx, DWORD PTR _bytes1$[ebp]
	push	edx
	lea	edx, DWORD PTR _ptr1$[ebp]
	push	edx
	mov	edx, DWORD PTR _file$[ebp+16]
	push	edx
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx+44]
	call	eax
; Line 162
	cmp	eax, -2005401450			; 88780096H
	jne	SHORT $LN8@LoadWave
; Line 163
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $LN55@LoadWave
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+80]
	push	eax
	call	edx
$LN55@LoadWave:
; Line 166
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _bytes2$[ebp]
	push	edx
	lea	edx, DWORD PTR _ptr2$[ebp]
	push	edx
	lea	edx, DWORD PTR _bytes1$[ebp]
	push	edx
	lea	edx, DWORD PTR _ptr1$[ebp]
	push	edx
	mov	edx, DWORD PTR _file$[ebp+16]
	push	edx
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ecx+44]
	call	eax
$LN8@LoadWave:
; Line 170
	cmp	eax, ebx
	jl	SHORT $LN7@LoadWave
; Line 176
	mov	ecx, DWORD PTR _bytes1$[ebp]
	mov	edx, DWORD PTR _ptr1$[ebp]
	mov	eax, DWORD PTR _file$[ebp+8]
	mov	esi, DWORD PTR __imp__mmioRead@12
	push	ecx
	push	edx
	push	eax
	xor	bl, bl
	call	esi
	cmp	eax, -1
	je	SHORT $LN5@LoadWave
	cmp	DWORD PTR _bytes1$[ebp], eax
	je	SHORT $LN6@LoadWave
$LN5@LoadWave:
; Line 177
	mov	bl, 1
$LN6@LoadWave:
; Line 178
	mov	ecx, DWORD PTR _bytes2$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@LoadWave
; Line 181
	mov	edx, DWORD PTR _file$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR _ptr2$[ebp]
	push	ecx
	push	edx
	call	esi
	mov	ecx, DWORD PTR _bytes2$[ebp]
	cmp	eax, -1
	je	SHORT $LN2@LoadWave
	cmp	ecx, eax
	je	SHORT $LN3@LoadWave
$LN2@LoadWave:
; Line 182
	mov	bl, 1
$LN3@LoadWave:
; Line 186
	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+76]
	push	ecx
	mov	ecx, DWORD PTR _ptr2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _bytes1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ptr1$[ebp]
	push	ecx
	push	eax
	call	edx
; Line 188
	lea	ecx, DWORD PTR _file$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1CWave@@UAE@XZ			; CWave::~CWave
	test	bl, bl
	jne	SHORT $LN38@LoadWave
; Line 190
	mov	al, 1
	jmp	SHORT $LN12@LoadWave
$LN7@LoadWave:
; Line 193
	lea	ecx, DWORD PTR _file$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], esi
	call	??1CWave@@UAE@XZ			; CWave::~CWave
	jmp	SHORT $LN38@LoadWave
$LN70@LoadWave:
	or	esi, -1
$LN10@LoadWave:
; Line 147
	mov	DWORD PTR __$EHRec$[ebp+8], esi
	mov	eax, DWORD PTR _file$[ebp+4]
	push	eax
$LN76@LoadWave:
	mov	DWORD PTR _file$[ebp], OFFSET ??_7CWave@@6B@
	call	??3@YAXPAX@Z				; operator delete
	mov	eax, DWORD PTR _file$[ebp+8]
	add	esp, 4
	mov	DWORD PTR _file$[ebp+4], ebx
	cmp	eax, ebx
	je	SHORT $LN38@LoadWave
	push	ebx
	push	eax
	call	DWORD PTR __imp__mmioClose@8
$LN38@LoadWave:
	xor	al, al
$LN12@LoadWave:
; Line 194
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z$0:
	lea	ecx, DWORD PTR _file$[ebp]
	jmp	??1CWave@@UAE@XZ			; CWave::~CWave
__ehhandler$?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ENDP	; CDxSoundBuffer::LoadWave
END
