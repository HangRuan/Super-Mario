; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\Administrator\Documents\Visual Studio 2010\Projects\SuperMario__\SuperMario_\SuperMario\MaiMarioSprite.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?UpdatePosition@MaiMarioSprite@@UAEXUtagRECT@@_N@Z ; MaiMarioSprite::UpdatePosition
PUBLIC	?DrawAnimation@MaiMarioSprite@@UAEXPAUHDC__@@@Z	; MaiMarioSprite::DrawAnimation
PUBLIC	?UpdateFrame@MaiMarioSprite@@UAE_N_N@Z		; MaiMarioSprite::UpdateFrame
PUBLIC	??_R4MaiMarioSprite@@6B@			; MaiMarioSprite::`RTTI Complete Object Locator'
PUBLIC	??_R3MaiMarioSprite@@8				; MaiMarioSprite::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MaiMarioSprite@@8				; MaiMarioSprite::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MaiMarioSprite@@8			; MaiMarioSprite::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVMaiMarioSprite@@@8			; MaiMarioSprite `RTTI Type Descriptor'
PUBLIC	??1MaiMarioSprite@@UAE@XZ			; MaiMarioSprite::~MaiMarioSprite
PUBLIC	??_GMaiMarioSprite@@UAEPAXI@Z			; MaiMarioSprite::`scalar deleting destructor'
PUBLIC	?getMapRows@CMap@@QAEHXZ			; CMap::getMapRows
PUBLIC	?getTileHeight@CMap@@QAEHXZ			; CMap::getTileHeight
PUBLIC	?getMapCols@CMap@@QAEHXZ			; CMap::getMapCols
PUBLIC	?getTileWidth@CMap@@QAEHXZ			; CMap::getTileWidth
PUBLIC	?getXOffset@CMap@@QAEHXZ			; CMap::getXOffset
PUBLIC	?setXOffset@CMap@@QAEXH@Z			; CMap::setXOffset
PUBLIC	?Play@CDxSoundBuffer@@QAE_N_N@Z			; CDxSoundBuffer::Play
PUBLIC	?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A ; main_sprite_fj3rfr3289jf
PUBLIC	??_7MaiMarioSprite@@6B@				; MaiMarioSprite::`vftable'
EXTRN	??_EMaiMarioSprite@@UAEPAXI@Z:PROC		; MaiMarioSprite::`vector deleting destructor'
EXTRN	__imp__GetAsyncKeyState@4:PROC
?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A DD 01H DUP (?) ; main_sprite_fj3rfr3289jf
;	COMDAT ??_7MaiMarioSprite@@6B@
CONST	SEGMENT
??_7MaiMarioSprite@@6B@ DD FLAT:??_R4MaiMarioSprite@@6B@ ; MaiMarioSprite::`vftable'
	DD	FLAT:??_EMaiMarioSprite@@UAEPAXI@Z
	DD	FLAT:?getDIB@CSprite@@UAEPAVCGdiBmp@@XZ
	DD	FLAT:?setTransRGB@CSprite@@UAEXK@Z
	DD	FLAT:?getTotalFrames@CSprite@@UAEHXZ
	DD	FLAT:?setTotalFrames@CSprite@@UAEXH@Z
	DD	FLAT:?getRowFrames@CSprite@@UAEHXZ
	DD	FLAT:?setRowFrames@CSprite@@UAEXH@Z
	DD	FLAT:?getFrameSize@CSprite@@UAE?AUtagSIZE@@XZ
	DD	FLAT:?setFrameSize@CSprite@@UAEXUtagSIZE@@@Z
	DD	FLAT:?getFrameCount@CSprite@@UAEHXZ
	DD	FLAT:?getRatio@CSprite@@UAENXZ
	DD	FLAT:?setRatio@CSprite@@UAEXN@Z
	DD	FLAT:?getMirror@CSprite@@UAEHXZ
	DD	FLAT:?setMirror@CSprite@@UAEXH@Z
	DD	FLAT:?getGlobalPos@CSprite@@UAE?AUtagPOINT@@XZ
	DD	FLAT:?setGlobalPos@CSprite@@UAEXUtagPOINT@@@Z
	DD	FLAT:?getPos@CSprite@@UAE?AUtagPOINT@@XZ
	DD	FLAT:?setPos@CSprite@@UAEXUtagPOINT@@@Z
	DD	FLAT:?getDirection@CSprite@@UAEHXZ
	DD	FLAT:?setDirection@CSprite@@UAEXH@Z
	DD	FLAT:?getLastDir@CSprite@@UAEHXZ
	DD	FLAT:?setLastDir@CSprite@@UAEXH@Z
	DD	FLAT:?getActive@CSprite@@UAE_NXZ
	DD	FLAT:?setActive@CSprite@@UAEX_N@Z
	DD	FLAT:?getVisible@CSprite@@UAE_NXZ
	DD	FLAT:?setVisible@CSprite@@UAEX_N@Z
	DD	FLAT:?getSpeed@CSprite@@UAEHXZ
	DD	FLAT:?setSpeed@CSprite@@UAEXH@Z
	DD	FLAT:?getDead@CSprite@@UAE_NXZ
	DD	FLAT:?setDead@CSprite@@UAEX_N@Z
	DD	FLAT:?getRestLife@CSprite@@UAEHXZ
	DD	FLAT:?setRestLife@CSprite@@UAEXH@Z
	DD	FLAT:?getScore@CSprite@@UAEHXZ
	DD	FLAT:?setScore@CSprite@@UAEXH@Z
	DD	FLAT:?getJumping@CSprite@@UAE_NXZ
	DD	FLAT:?setJumping@CSprite@@UAEX_N@Z
	DD	FLAT:?getFalling@CSprite@@UAE_NXZ
	DD	FLAT:?setFalling@CSprite@@UAEX_N@Z
	DD	FLAT:?UpdateFrame@MaiMarioSprite@@UAE_N_N@Z
	DD	FLAT:?DrawAnimation@MaiMarioSprite@@UAEXPAUHDC__@@@Z
	DD	FLAT:?CheckBound@CSprite@@UAE_NUtagRECT@@H@Z
	DD	FLAT:?CollideWith@CSprite@@UAE_NPAV1@H@Z
	DD	FLAT:?CheckMoveBound@CSprite@@UAE_NXZ
	DD	FLAT:?isPosBarrier@CSprite@@UAE_NUtagPOINT@@@Z
	DD	FLAT:?UpdateDirection@CSprite@@UAEXXZ
	DD	FLAT:?UpdatePosition@MaiMarioSprite@@UAEXUtagRECT@@_N@Z
CONST	ENDS
;	COMDAT ??_R4MaiMarioSprite@@6B@
rdata$r	SEGMENT
??_R4MaiMarioSprite@@6B@ DD 00H				; MaiMarioSprite::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMaiMarioSprite@@@8
	DD	FLAT:??_R3MaiMarioSprite@@8
rdata$r	ENDS
;	COMDAT ??_R3MaiMarioSprite@@8
rdata$r	SEGMENT
??_R3MaiMarioSprite@@8 DD 00H				; MaiMarioSprite::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MaiMarioSprite@@8
rdata$r	ENDS
;	COMDAT ??_R2MaiMarioSprite@@8
rdata$r	SEGMENT
??_R2MaiMarioSprite@@8 DD FLAT:??_R1A@?0A@EA@MaiMarioSprite@@8 ; MaiMarioSprite::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSprite@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MaiMarioSprite@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MaiMarioSprite@@8 DD FLAT:??_R0?AVMaiMarioSprite@@@8 ; MaiMarioSprite::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MaiMarioSprite@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMaiMarioSprite@@@8
_DATA	SEGMENT
??_R0?AVMaiMarioSprite@@@8 DD FLAT:??_7type_info@@6B@	; MaiMarioSprite `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMaiMarioSprite@@', 00H
PUBLIC	__real@40000000
PUBLIC	__real@00000000
PUBLIC	__real@42200000
PUBLIC	?initMarioSir@MaiMarioSprite@@QAEXXZ		; MaiMarioSprite::initMarioSir
;	COMDAT __real@40000000
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\maimariosprite.cpp
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?initMarioSir@MaiMarioSprite@@QAEXXZ
_TEXT	SEGMENT
?initMarioSir@MaiMarioSprite@@QAEXXZ PROC		; MaiMarioSprite::initMarioSir, COMDAT
; _this$ = eax
; Line 285
	fld	DWORD PTR __real@42200000
; Line 292
	mov	DWORD PTR ?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A, eax ; main_sprite_fj3rfr3289jf
	fst	DWORD PTR [eax+4412]
; Line 293
	mov	BYTE PTR [eax+4436], 0
	fstp	DWORD PTR [eax+4416]
	fldz
	fst	DWORD PTR [eax+4428]
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [eax+4432]
	fst	DWORD PTR [eax+4420]
	fstp	DWORD PTR [eax+4424]
; Line 294
	ret	0
?initMarioSir@MaiMarioSprite@@QAEXXZ ENDP		; MaiMarioSprite::initMarioSir
_TEXT	ENDS
PUBLIC	?OnKeyDown@MaiMarioSprite@@QAEHH@Z		; MaiMarioSprite::OnKeyDown
; Function compile flags: /Ogtp
;	COMDAT ?OnKeyDown@MaiMarioSprite@@QAEHH@Z
_TEXT	SEGMENT
?OnKeyDown@MaiMarioSprite@@QAEHH@Z PROC			; MaiMarioSprite::OnKeyDown, COMDAT
; Line 185
	xor	eax, eax
; Line 186
	ret	0
?OnKeyDown@MaiMarioSprite@@QAEHH@Z ENDP			; MaiMarioSprite::OnKeyDown
_TEXT	ENDS
PUBLIC	?getMainSprite@MaiMarioSprite@@SAPAV1@XZ	; MaiMarioSprite::getMainSprite
; Function compile flags: /Ogtp
;	COMDAT ?getMainSprite@MaiMarioSprite@@SAPAV1@XZ
_TEXT	SEGMENT
?getMainSprite@MaiMarioSprite@@SAPAV1@XZ PROC		; MaiMarioSprite::getMainSprite, COMDAT
; Line 94
	mov	eax, DWORD PTR ?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A ; main_sprite_fj3rfr3289jf
; Line 95
	ret	0
?getMainSprite@MaiMarioSprite@@SAPAV1@XZ ENDP		; MaiMarioSprite::getMainSprite
_TEXT	ENDS
PUBLIC	?setActionNow@MaiMarioSprite@@QAEHH@Z		; MaiMarioSprite::setActionNow
; Function compile flags: /Ogtp
;	COMDAT ?setActionNow@MaiMarioSprite@@QAEHH@Z
_TEXT	SEGMENT
?setActionNow@MaiMarioSprite@@QAEHH@Z PROC		; MaiMarioSprite::setActionNow, COMDAT
; _this$ = ecx
; _action_now$ = eax
; Line 84
	cmp	DWORD PTR [ecx+4400], eax
	je	SHORT $LN4@setActionN
; Line 86
	mov	DWORD PTR [ecx+4400], eax
; Line 87
	imul	eax, 264				; 00000108H
	mov	DWORD PTR [eax+ecx+360], 0
$LN4@setActionN:
; Line 89
	xor	eax, eax
; Line 90
	ret	0
?setActionNow@MaiMarioSprite@@QAEHH@Z ENDP		; MaiMarioSprite::setActionNow
_TEXT	ENDS
PUBLIC	?addAction@MaiMarioSprite@@QAEHPAHHH@Z		; MaiMarioSprite::addAction
; Function compile flags: /Ogtp
;	COMDAT ?addAction@MaiMarioSprite@@QAEHPAHHH@Z
_TEXT	SEGMENT
?addAction@MaiMarioSprite@@QAEHPAHHH@Z PROC		; MaiMarioSprite::addAction, COMDAT
; _this$ = eax
; _frames$ = edi
; _count$ = esi
; _type$ = edx
; Line 61
	mov	ecx, DWORD PTR [eax+4392]
	mov	DWORD PTR [eax+ecx*4+4328], edx
; Line 62
	xor	ecx, ecx
	test	esi, esi
	jle	SHORT $LN1@addAction
	push	ebx
$LL3@addAction:
	mov	edx, DWORD PTR [eax+4392]
	mov	ebx, edx
	shl	ebx, 5
	add	ebx, edx
	lea	edx, DWORD PTR [ecx+ebx*2]
	mov	ebx, DWORD PTR [edi+ecx*4]
	inc	ecx
	mov	DWORD PTR [eax+edx*4+104], ebx
	cmp	ecx, esi
	jl	SHORT $LL3@addAction
	pop	ebx
$LN1@addAction:
; Line 63
	mov	ecx, DWORD PTR [eax+4392]
	mov	edx, ecx
	shl	edx, 5
	add	edx, ecx
	mov	DWORD PTR [eax+edx*8+360], 0
; Line 64
	mov	ecx, DWORD PTR [eax+4392]
	mov	edx, ecx
	shl	edx, 5
	add	edx, ecx
	mov	DWORD PTR [eax+edx*8+364], esi
	inc	DWORD PTR [eax+4392]
; Line 65
	xor	eax, eax
; Line 66
	ret	0
?addAction@MaiMarioSprite@@QAEHPAHHH@Z ENDP		; MaiMarioSprite::addAction
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Play@CDxSoundBuffer@@QAE_N_N@Z
_TEXT	SEGMENT
_loop$ = 8						; size = 1
?Play@CDxSoundBuffer@@QAE_N_N@Z PROC			; CDxSoundBuffer::Play, COMDAT
; _this$ = eax
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cdxsound.h
; Line 40
	push	ebp
	mov	ebp, esp
; Line 41
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	BYTE PTR _loop$[ebp], dl
	setne	dl
	push	edx
	push	0
	push	0
	push	eax
	mov	eax, DWORD PTR [ecx+48]
	call	eax
	test	eax, eax
	setns	al
; Line 44
	pop	ebp
	ret	4
?Play@CDxSoundBuffer@@QAE_N_N@Z ENDP			; CDxSoundBuffer::Play
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?setXOffset@CMap@@QAEXH@Z
_TEXT	SEGMENT
?setXOffset@CMap@@QAEXH@Z PROC				; CMap::setXOffset, COMDAT
; _x$ = ecx
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cmap.h
; Line 50
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	DWORD PTR [eax+72], ecx
	ret	0
?setXOffset@CMap@@QAEXH@Z ENDP				; CMap::setXOffset
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?getXOffset@CMap@@QAEHXZ
_TEXT	SEGMENT
?getXOffset@CMap@@QAEHXZ PROC				; CMap::getXOffset, COMDAT
; Line 49
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	eax, DWORD PTR [eax+72]
	ret	0
?getXOffset@CMap@@QAEHXZ ENDP				; CMap::getXOffset
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?getTileHeight@CMap@@QAEHXZ
_TEXT	SEGMENT
?getTileHeight@CMap@@QAEHXZ PROC			; CMap::getTileHeight, COMDAT
; Line 47
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	eax, DWORD PTR [eax+56]
	ret	0
?getTileHeight@CMap@@QAEHXZ ENDP			; CMap::getTileHeight
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?getTileWidth@CMap@@QAEHXZ
_TEXT	SEGMENT
?getTileWidth@CMap@@QAEHXZ PROC				; CMap::getTileWidth, COMDAT
; Line 46
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	eax, DWORD PTR [eax+52]
	ret	0
?getTileWidth@CMap@@QAEHXZ ENDP				; CMap::getTileWidth
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?getMapRows@CMap@@QAEHXZ
_TEXT	SEGMENT
?getMapRows@CMap@@QAEHXZ PROC				; CMap::getMapRows, COMDAT
; Line 44
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	eax, DWORD PTR [eax+68]
	ret	0
?getMapRows@CMap@@QAEHXZ ENDP				; CMap::getMapRows
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?getMapCols@CMap@@QAEHXZ
_TEXT	SEGMENT
?getMapCols@CMap@@QAEHXZ PROC				; CMap::getMapCols, COMDAT
; Line 43
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	eax, DWORD PTR [eax+64]
	ret	0
?getMapCols@CMap@@QAEHXZ ENDP				; CMap::getMapCols
PUBLIC	__real@4069000000000000
PUBLIC	?CheckIfDeath@MaiMarioSprite@@QAEXXZ		; MaiMarioSprite::CheckIfDeath
;	COMDAT __real@4069000000000000
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\maimariosprite.cpp
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckIfDeath@MaiMarioSprite@@QAEXXZ
_TEXT	SEGMENT
?CheckIfDeath@MaiMarioSprite@@QAEXXZ PROC		; MaiMarioSprite::CheckIfDeath, COMDAT
; _this$ = ecx
; Line 299
	fld	DWORD PTR [ecx+4416]
	fcomp	QWORD PTR __real@4069000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1@CheckIfDea
; Line 301
	xor	eax, eax
	mov	BYTE PTR [ecx+4436], 1
	cmp	DWORD PTR [ecx+4400], eax
	je	SHORT $LN4@CheckIfDea
	mov	DWORD PTR [ecx+4400], eax
	mov	DWORD PTR [ecx+360], eax
$LN4@CheckIfDea:
; Line 302
	mov	DWORD PTR ?oldTimeCount@@3JA, eax	; oldTimeCount
$LN1@CheckIfDea:
; Line 304
	ret	0
?CheckIfDeath@MaiMarioSprite@@QAEXXZ ENDP		; MaiMarioSprite::CheckIfDeath
_TEXT	ENDS
PUBLIC	__real@41200000
PUBLIC	__real@c0c00000
PUBLIC	?is_sprite_ng@MaiMarioSprite@@QAEHXZ		; MaiMarioSprite::is_sprite_ng
;	COMDAT __real@41200000
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cmap.cpp
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?is_sprite_ng@MaiMarioSprite@@QAEHXZ
_TEXT	SEGMENT
_b1$100349 = -40					; size = 4
_r1$100348 = -36					; size = 4
_l0$ = -32						; size = 4
tv1916 = -28						; size = 4
tv1905 = -28						; size = 4
tv660 = -28						; size = 4
tv648 = -28						; size = 4
_b0$ = -28						; size = 4
_r0$ = -24						; size = 4
_t0$ = -20						; size = 4
tv675 = -16						; size = 4
_x_end$ = -16						; size = 4
tv1831 = -12						; size = 4
tv683 = -12						; size = 4
_y_start$ = -8						; size = 4
_y_end$ = -4						; size = 4
$T135869 = 8						; size = 4
$T135860 = 8						; size = 4
$T135793 = 8						; size = 4
$T135770 = 8						; size = 4
_this$ = 8						; size = 4
?is_sprite_ng@MaiMarioSprite@@QAEHXZ PROC		; MaiMarioSprite::is_sprite_ng, COMDAT
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\maimariosprite.cpp
; Line 98
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
; Line 99
	mov	edi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edi+28]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv1916[ebp], eax
	fild	DWORD PTR tv1916[ebp]
	fstp	DWORD PTR tv648[ebp]
	fld	DWORD PTR [edi+4412]
	fld	DWORD PTR tv648[ebp]
	fld	ST(0)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
	mov	ebx, eax
; Line 100
	mov	eax, DWORD PTR [edi+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv1905[ebp], eax
	mov	DWORD PTR _l0$[ebp], ebx
	fild	DWORD PTR tv1905[ebp]
	fstp	DWORD PTR tv660[ebp]
	fld	DWORD PTR [edi+4416]
	fld	DWORD PTR tv660[ebp]
	fld	ST(0)
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
; Line 101
	fld	DWORD PTR [edi+4412]
	faddp	ST(2), ST(0)
	mov	DWORD PTR _t0$[ebp], eax
	fxch	ST(1)
	call	__ftol2_sse
; Line 102
	fadd	DWORD PTR [edi+4416]
	mov	esi, eax
	mov	DWORD PTR _r0$[ebp], esi
	call	__ftol2_sse
	mov	DWORD PTR _b0$[ebp], eax
; Line 104
	test	ebx, ebx
	js	$LN269@is_sprite_
; Line 105
	cmp	DWORD PTR _t0$[ebp], 0
	jl	$LN269@is_sprite_
; Line 106
	mov	ebx, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	ecx, DWORD PTR [ebx+52]
	mov	DWORD PTR tv675[ebp], ecx
	imul	ecx, DWORD PTR [ebx+64]
	cmp	esi, ecx
	jge	$LN269@is_sprite_
; Line 107
	mov	ecx, DWORD PTR [ebx+56]
	mov	DWORD PTR tv683[ebp], ecx
	imul	ecx, DWORD PTR [ebx+68]
	cmp	eax, ecx
	jge	$LN269@is_sprite_
; Line 109
	fld	DWORD PTR [edi+4412]
	fidiv	DWORD PTR tv675[ebp]
	call	__ftol2_sse
	mov	esi, eax
	sub	esi, 3
; Line 110
	jns	SHORT $LN28@is_sprite_
	xor	esi, esi
$LN28@is_sprite_:
; Line 112
	mov	eax, DWORD PTR [ebx+64]
	lea	ecx, DWORD PTR [esi+6]
	mov	DWORD PTR _x_end$[ebp], ecx
	cmp	ecx, eax
	jle	SHORT $LN51@is_sprite_
	mov	DWORD PTR _x_end$[ebp], eax
$LN51@is_sprite_:
; Line 113
	fld	DWORD PTR [edi+4416]
	fidiv	DWORD PTR tv683[ebp]
	call	__ftol2_sse
	sub	eax, 3
	mov	DWORD PTR _y_start$[ebp], eax
; Line 114
	jns	SHORT $LN26@is_sprite_
	mov	DWORD PTR _y_start$[ebp], 0
	mov	eax, DWORD PTR _y_start$[ebp]
$LN26@is_sprite_:
; Line 116
	mov	ecx, DWORD PTR [ebx+68]
	lea	edx, DWORD PTR [eax+6]
	mov	DWORD PTR _y_end$[ebp], edx
	cmp	edx, ecx
	jle	SHORT $LN57@is_sprite_
	mov	DWORD PTR _y_end$[ebp], ecx
$LN57@is_sprite_:
; Line 118
	mov	edi, esi
	cmp	esi, DWORD PTR _x_end$[ebp]
	jge	$LN22@is_sprite_
	fld	DWORD PTR __real@c0c00000
	shl	esi, 4
	fldz
	mov	DWORD PTR tv1831[ebp], esi
$LN24@is_sprite_:
; Line 120
	mov	esi, eax
	cmp	eax, DWORD PTR _y_end$[ebp]
	jge	$LN23@is_sprite_
$LN21@is_sprite_:
; Line 122
	mov	edx, DWORD PTR [ebx+52]
; Line 123
	mov	ecx, DWORD PTR [ebx+56]
	mov	eax, edx
	imul	ecx, esi
	imul	eax, edi
; Line 124
	add	edx, eax
	mov	DWORD PTR _r1$100348[ebp], edx
; Line 125
	mov	edx, DWORD PTR [ebx+56]
	add	edx, ecx
	mov	DWORD PTR _b1$100349[ebp], edx
; Line 126
	mov	edx, DWORD PTR _l0$[ebp]
	cmp	edx, eax
	jg	SHORT $LN17@is_sprite_
	cmp	DWORD PTR _r0$[ebp], eax
	jle	$LN20@is_sprite_
$LN17@is_sprite_:
	mov	eax, DWORD PTR _t0$[ebp]
	cmp	eax, ecx
	jg	SHORT $LN16@is_sprite_
	cmp	DWORD PTR _b0$[ebp], ecx
	jle	$LN20@is_sprite_
$LN16@is_sprite_:
	mov	ecx, DWORD PTR _r1$100348[ebp]
	cmp	edx, ecx
	jl	SHORT $LN15@is_sprite_
	cmp	DWORD PTR _r0$[ebp], ecx
	jge	$LN20@is_sprite_
$LN15@is_sprite_:
	mov	ecx, DWORD PTR _b1$100349[ebp]
	cmp	eax, ecx
	jl	SHORT $LN14@is_sprite_
	cmp	DWORD PTR _b0$[ebp], ecx
	jge	$LN20@is_sprite_
$LN14@is_sprite_:
; Line 128
	test	edi, edi
	js	$LN255@is_sprite_
	cmp	edi, DWORD PTR [ebx+64]
	jge	$LN255@is_sprite_
	test	esi, esi
	js	$LN255@is_sprite_
	cmp	esi, DWORD PTR [ebx+68]
	jge	$LN255@is_sprite_
	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [ecx+esi*4]
	cmp	DWORD PTR [eax+edi*4], 0
	je	SHORT $LN13@is_sprite_
	cmp	BYTE PTR ?isDragingFlag@@3_NA, 0	; isDragingFlag
	je	SHORT $LN13@is_sprite_
; Line 129
	mov	BYTE PTR ?isDragingFlag@@3_NA, 0	; isDragingFlag
$LN13@is_sprite_:
; Line 131
	mov	edx, eax
	cmp	DWORD PTR [edx+edi*4], 99		; 00000063H
	jne	SHORT $LN12@is_sprite_
; Line 132
	mov	BYTE PTR ?UpGgradeLevel@@3_NA, 1	; UpGgradeLevel
$LN12@is_sprite_:
; Line 135
	cmp	DWORD PTR [edx+edi*4], 2
	fxch	ST(1)
	mov	edx, DWORD PTR _this$[ebp]
	jne	SHORT $LN9@is_sprite_
	fcom	DWORD PTR [edx+4424]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN217@is_sprite_
$LN9@is_sprite_:
	mov	eax, DWORD PTR [ecx+esi*4]
	cmp	DWORD PTR [eax+edi*4], 45		; 0000002dH
	je	SHORT $LN217@is_sprite_
	lea	eax, DWORD PTR [esi-1]
	test	eax, eax
	jle	$LN11@is_sprite_
	cmp	eax, DWORD PTR [ebx+68]
	jge	$LN223@is_sprite_
	mov	edx, DWORD PTR [ecx+esi*4-4]
	cmp	DWORD PTR [edx+edi*4], 45		; 0000002dH
	mov	edx, DWORD PTR _this$[ebp]
	jne	$LN11@is_sprite_
	fcom	DWORD PTR [edx+4424]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN11@is_sprite_
$LN217@is_sprite_:
; Line 137
	mov	eax, DWORD PTR [ecx+esi*4]
	fstp	ST(1)
	cmp	DWORD PTR [eax+edi*4], 2
	fstp	ST(0)
	mov	BYTE PTR ?isGettingCoin@@3_NA, 1	; isGettingCoin
	jne	SHORT $LN8@is_sprite_
; Line 138
	push	1
	push	esi
	push	edi
	push	ebx
	call	?setBackMatrix@CMap@@QAEXHHH@Z		; CMap::setBackMatrix
; Line 139
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	edx, DWORD PTR [eax+64]
	cmp	edi, edx
	jge	$LN94@is_sprite_
	mov	ecx, DWORD PTR [eax+68]
	cmp	esi, ecx
	jge	$LN94@is_sprite_
	imul	ecx, edx
	cmp	ecx, 1
	jle	$LN143@is_sprite_
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [edx+edi*4], 1
	jmp	SHORT $LN267@is_sprite_
$LN8@is_sprite_:
; Line 141
	cmp	DWORD PTR [eax+edi*4], 45		; 0000002dH
; Line 142
	push	32					; 00000020H
	jne	SHORT $LN6@is_sprite_
	push	esi
	push	edi
	push	ebx
	call	?setBackMatrix@CMap@@QAEXHHH@Z		; CMap::setBackMatrix
; Line 143
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	cmp	edi, DWORD PTR [eax+64]
	jge	$LN145@is_sprite_
	cmp	esi, DWORD PTR [eax+68]
	jge	$LN145@is_sprite_
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+esi*4]
; Line 145
	jmp	SHORT $LN268@is_sprite_
$LN6@is_sprite_:
; Line 146
	lea	eax, DWORD PTR [esi-1]
	push	eax
	push	edi
	push	ebx
	call	?setBackMatrix@CMap@@QAEXHHH@Z		; CMap::setBackMatrix
; Line 147
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	cmp	edi, DWORD PTR [eax+64]
	jge	$LN110@is_sprite_
	lea	ecx, DWORD PTR [esi-1]
	test	ecx, ecx
	js	$LN110@is_sprite_
	cmp	ecx, DWORD PTR [eax+68]
	jge	$LN110@is_sprite_
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+esi*4-4]
$LN268@is_sprite_:
	mov	DWORD PTR [edx+edi*4], 0
$LN267@is_sprite_:
; Line 153
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	inc	DWORD PTR ?coinCount@@3HA		; coinCount
	mov	BYTE PTR [eax+12], 1
	mov	eax, DWORD PTR [eax+72]
	add	eax, DWORD PTR tv1831[ebp]
	mov	ebx, DWORD PTR [ecx]
	mov	edx, esi
	shl	edx, 4
	push	edx
	push	eax
	mov	eax, DWORD PTR [ebx+68]
	call	eax
; Line 154
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+100]
	push	1
	call	eax
	fldz
	mov	ebx, DWORD PTR ?map@@3PAVCMap@@A	; map
	fld	DWORD PTR __real@c0c00000
	mov	edx, DWORD PTR _this$[ebp]
$LN11@is_sprite_:
; Line 157
	cmp	edi, DWORD PTR [ebx+64]
	jge	$LN223@is_sprite_
	cmp	esi, DWORD PTR [ebx+68]
	jge	$LN223@is_sprite_
; Line 120
	mov	ecx, DWORD PTR [ebx+8]
	lea	eax, DWORD PTR [ecx+esi*4]
; Line 157
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+edi*4], 11		; 0000000bH
	je	SHORT $LN3@is_sprite_
	cmp	DWORD PTR [ecx+edi*4], 10		; 0000000aH
	jne	SHORT $LN2@is_sprite_
$LN3@is_sprite_:
; Line 158
	fxch	ST(1)
	fst	DWORD PTR [edx+4420]
; Line 159
	fld	DWORD PTR __real@41200000
	fstp	DWORD PTR [edx+4424]
; Line 160
	fst	DWORD PTR [edx+4428]
; Line 161
	cmp	edi, DWORD PTR [ebx+64]
	jge	$LN255@is_sprite_
	cmp	esi, DWORD PTR [ebx+68]
	jge	$LN255@is_sprite_
; Line 163
	cmp	DWORD PTR ?dragDistance@@3HA, 0		; dragDistance
	mov	ecx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edi*4], 0
	mov	BYTE PTR [ebx+12], 1
	mov	BYTE PTR ?isDragingFlag@@3_NA, 1	; isDragingFlag
	jne	SHORT $LN260@is_sprite_
; Line 164
	fld	DWORD PTR [edx+4416]
	call	__ftol2_sse
	mov	DWORD PTR ?dragDistance@@3HA, eax	; dragDistance
$LN260@is_sprite_:
	fxch	ST(1)
$LN2@is_sprite_:
; Line 167
	cmp	edi, DWORD PTR [ebx+64]
	jge	SHORT $LN247@is_sprite_
	cmp	esi, DWORD PTR [ebx+68]
	jge	SHORT $LN247@is_sprite_
	mov	ecx, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ecx+esi*4]
	cmp	DWORD PTR [edx+edi*4], 0
	jne	SHORT $LN249@is_sprite_
	fxch	ST(1)
$LN20@is_sprite_:
; Line 120
	inc	esi
	cmp	esi, DWORD PTR _y_end$[ebp]
	jl	$LN21@is_sprite_
	mov	eax, DWORD PTR _y_start$[ebp]
$LN23@is_sprite_:
; Line 118
	add	DWORD PTR tv1831[ebp], 16		; 00000010H
	inc	edi
	cmp	edi, DWORD PTR _x_end$[ebp]
	jl	$LN24@is_sprite_
	fstp	ST(0)
	fstp	ST(0)
$LN22@is_sprite_:
; Line 172
	xor	eax, eax
; Line 173
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN223@is_sprite_:
; Line 135
	fstp	ST(1)
	fstp	ST(0)
$LN145@is_sprite_:
	push	OFFSET __TI2PA_W
	lea	eax, DWORD PTR $T135770[ebp]
	push	eax
	mov	DWORD PTR $T135770[ebp], OFFSET ??_C@_1BC@IOCOMCJD@w?i?$JG5?$HN?$CC_?$BFP?$DMe?$OAeH?$PP?$AB?$AA?$AA@
	call	__CxxThrowException@8
$LN270@is_sprite_:
$LN143@is_sprite_:
; Line 139
	push	OFFSET __TI2PA_W
	lea	ecx, DWORD PTR $T135793[ebp]
	push	ecx
	mov	DWORD PTR $T135793[ebp], OFFSET ??_C@_1BC@GLMAJFJM@V?$POWW?$HN?$CC_?$BFP?$DMe?$OAeH?$PP?$AB?$AA?$AA@
	call	__CxxThrowException@8
$LN271@is_sprite_:
$LN249@is_sprite_:
; Line 167
	fstp	ST(1)
	fstp	ST(0)
$LN269@is_sprite_:
; Line 173
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN247@is_sprite_:
; Line 167
	fstp	ST(1)
	fstp	ST(0)
$LN110@is_sprite_:
	push	OFFSET __TI2PA_W
	lea	ecx, DWORD PTR $T135869[ebp]
	push	ecx
	mov	DWORD PTR $T135869[ebp], OFFSET ??_C@_1BC@IOCOMCJD@w?i?$JG5?$HN?$CC_?$BFP?$DMe?$OAeH?$PP?$AB?$AA?$AA@
	call	__CxxThrowException@8
$LN272@is_sprite_:
$LN255@is_sprite_:
; Line 161
	fstp	ST(0)
	fstp	ST(0)
$LN94@is_sprite_:
	push	OFFSET __TI2PA_W
	lea	edx, DWORD PTR $T135860[ebp]
	push	edx
	mov	DWORD PTR $T135860[ebp], OFFSET ??_C@_1BC@IOCOMCJD@w?i?$JG5?$HN?$CC_?$BFP?$DMe?$OAeH?$PP?$AB?$AA?$AA@
	call	__CxxThrowException@8
$LN273@is_sprite_:
$LN266@is_sprite_:
	int	3
?is_sprite_ng@MaiMarioSprite@@QAEHXZ ENDP		; MaiMarioSprite::is_sprite_ng
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?UpdateFrame@MaiMarioSprite@@UAE_N_N@Z
_TEXT	SEGMENT
_isLoop$ = 8						; size = 1
?UpdateFrame@MaiMarioSprite@@UAE_N_N@Z PROC		; MaiMarioSprite::UpdateFrame, COMDAT
; _this$ = ecx
; Line 76
	push	ebp
	mov	ebp, esp
	push	esi
; Line 77
	mov	esi, DWORD PTR [ecx+4400]
	imul	esi, 264				; 00000108H
	mov	eax, DWORD PTR [esi+ecx+360]
	inc	eax
	cdq
	idiv	DWORD PTR [esi+ecx+364]
; Line 78
	mov	al, 1
	mov	DWORD PTR [esi+ecx+360], edx
	mov	edx, DWORD PTR [ecx+20]
	inc	DWORD PTR [ecx+36]
	dec	edx
	pop	esi
	cmp	DWORD PTR [ecx+36], edx
	jle	SHORT $LN3@UpdateFram@2
	xor	eax, eax
	cmp	BYTE PTR _isLoop$[ebp], al
	je	SHORT $LN8@UpdateFram@2
	mov	DWORD PTR [ecx+36], eax
	mov	al, 1
; Line 79
	pop	ebp
	ret	4
$LN8@UpdateFram@2:
; Line 78
	mov	DWORD PTR [ecx+36], edx
$LN3@UpdateFram@2:
; Line 79
	pop	ebp
	ret	4
?UpdateFrame@MaiMarioSprite@@UAE_N_N@Z ENDP		; MaiMarioSprite::UpdateFrame
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??1MaiMarioSprite@@UAE@XZ
_TEXT	SEGMENT
??1MaiMarioSprite@@UAE@XZ PROC				; MaiMarioSprite::~MaiMarioSprite, COMDAT
; _this$ = eax
	mov	DWORD PTR [eax], OFFSET ??_7CSprite@@6B@
	ret	0
??1MaiMarioSprite@@UAE@XZ ENDP				; MaiMarioSprite::~MaiMarioSprite
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GMaiMarioSprite@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMaiMarioSprite@@UAEPAXI@Z PROC			; MaiMarioSprite::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	test	BYTE PTR ___flags$[ebp], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CSprite@@6B@
	je	SHORT $LN8@scalar@5
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN8@scalar@5:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GMaiMarioSprite@@UAEPAXI@Z ENDP			; MaiMarioSprite::`scalar deleting destructor'
PUBLIC	__real@3fecccccc0000000
PUBLIC	__real@c1700000
PUBLIC	__real@41000000
PUBLIC	__real@c1000000
;	COMDAT __real@3fecccccc0000000
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cmap.h
CONST	SEGMENT
__real@3fecccccc0000000 DQ 03fecccccc0000000r	; 0.9
CONST	ENDS
;	COMDAT __real@c1700000
CONST	SEGMENT
__real@c1700000 DD 0c1700000r			; -15
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?UpdatePosition@MaiMarioSprite@@UAEXUtagRECT@@_N@Z
_TEXT	SEGMENT
tv532 = -8						; size = 4
_y_tmp$ = -8						; size = 4
tv618 = -4						; size = 4
tv607 = -4						; size = 4
tv553 = -4						; size = 4
_x_tmp$ = -4						; size = 4
_bound$ = 8						; size = 16
_keyPressed$ = 24					; size = 1
?UpdatePosition@MaiMarioSprite@@UAEXUtagRECT@@_N@Z PROC	; MaiMarioSprite::UpdatePosition, COMDAT
; _this$ = ecx
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\maimariosprite.cpp
; Line 189
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
; Line 190
	mov	edi, DWORD PTR __imp__GetAsyncKeyState@4
	push	37					; 00000025H
	mov	esi, ecx
	call	edi
	test	ax, ax
	jns	SHORT $LN20@UpdatePosi
	cmp	BYTE PTR ?isDragingFlag@@3_NA, 0	; isDragingFlag
	jne	SHORT $LN20@UpdatePosi
; Line 193
	mov	eax, DWORD PTR [esi]
	fld	DWORD PTR __real@c1000000
	mov	edx, DWORD PTR [eax+84]
	fstp	DWORD PTR [esi+4420]
	xor	ebx, ebx
	push	ebx
	mov	ecx, esi
	call	edx
; Line 194
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+76]
	push	ebx
	mov	ecx, esi
	call	edx
	jmp	SHORT $LN17@UpdatePosi
$LN20@UpdatePosi:
; Line 196
	push	39					; 00000027H
	call	edi
	test	ax, ax
	jns	SHORT $LN18@UpdatePosi
	cmp	BYTE PTR ?isDragingFlag@@3_NA, 0	; isDragingFlag
	jne	SHORT $LN18@UpdatePosi
; Line 199
	mov	eax, DWORD PTR [esi]
	fld	DWORD PTR __real@41000000
	mov	edx, DWORD PTR [eax+84]
	fstp	DWORD PTR [esi+4420]
	push	1
	mov	ecx, esi
	call	edx
; Line 200
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+76]
	push	1
	mov	ecx, esi
	call	edx
; Line 202
	jmp	SHORT $LN59@UpdatePosi
$LN18@UpdatePosi:
; Line 204
	fldz
	fstp	DWORD PTR [esi+4420]
$LN59@UpdatePosi:
	xor	ebx, ebx
$LN17@UpdatePosi:
; Line 207
	cmp	DWORD PTR [esi+4400], 2
	je	$LN9@UpdatePosi
; Line 209
	push	37					; 00000025H
	call	edi
	test	ax, ax
	jns	SHORT $LN15@UpdatePosi
	cmp	BYTE PTR ?isDragingFlag@@3_NA, 0	; isDragingFlag
	jne	SHORT $LN15@UpdatePosi
; Line 211
	mov	eax, 1
	cmp	DWORD PTR [esi+4400], eax
	je	SHORT $LN29@UpdatePosi
	mov	DWORD PTR [esi+4400], eax
	mov	DWORD PTR [esi+624], ebx
	jmp	SHORT $LN29@UpdatePosi
$LN15@UpdatePosi:
; Line 213
	push	39					; 00000027H
	call	edi
	test	ax, ax
	jns	SHORT $LN13@UpdatePosi
	cmp	BYTE PTR ?isDragingFlag@@3_NA, 0	; isDragingFlag
	jne	SHORT $LN13@UpdatePosi
; Line 215
	cmp	DWORD PTR [esi+4400], 1
	je	SHORT $LN29@UpdatePosi
	mov	DWORD PTR [esi+4400], 1
	mov	DWORD PTR [esi+624], ebx
; Line 217
	jmp	SHORT $LN29@UpdatePosi
$LN13@UpdatePosi:
; Line 219
	cmp	DWORD PTR [esi+4400], ebx
	je	SHORT $LN29@UpdatePosi
	mov	DWORD PTR [esi+4400], ebx
	mov	DWORD PTR [esi+360], ebx
$LN29@UpdatePosi:
; Line 222
	push	88					; 00000058H
	call	edi
	test	ax, ax
	jns	SHORT $LN11@UpdatePosi
; Line 224
	cmp	DWORD PTR [esi+4404], ebx
	je	SHORT $LN9@UpdatePosi
	cmp	DWORD PTR [esi+4408], ebx
	je	SHORT $LN9@UpdatePosi
; Line 226
	fld	DWORD PTR __real@c1700000
; Line 227
	mov	eax, 2
	fstp	DWORD PTR [esi+4424]
	cmp	DWORD PTR [esi+4400], eax
	je	SHORT $LN32@UpdatePosi
	mov	DWORD PTR [esi+4400], eax
	mov	DWORD PTR [esi+888], ebx
$LN32@UpdatePosi:
; Line 228
	mov	eax, DWORD PTR ?JumpSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	push	ebx
	push	ebx
	push	ebx
	push	eax
	call	edx
; Line 229
	mov	DWORD PTR [esi+4404], ebx
; Line 232
	jmp	SHORT $LN9@UpdatePosi
$LN11@UpdatePosi:
; Line 234
	mov	DWORD PTR [esi+4404], 1
$LN9@UpdatePosi:
; Line 238
	fld	DWORD PTR [esi+4412]
; Line 241
	push	esi
	fstp	DWORD PTR _x_tmp$[esp+28]
	fld	DWORD PTR [esi+4420]
	fadd	DWORD PTR [esi+4412]
	fstp	DWORD PTR [esi+4412]
	call	?is_sprite_ng@MaiMarioSprite@@QAEHXZ	; MaiMarioSprite::is_sprite_ng
	test	eax, eax
	je	SHORT $LN7@UpdatePosi
$LN8@UpdatePosi:
; Line 243
	fld	DWORD PTR [esi+4420]
	push	esi
	fmul	QWORD PTR __real@3fecccccc0000000
	fstp	DWORD PTR tv532[esp+28]
	fld	DWORD PTR tv532[esp+28]
	fst	DWORD PTR [esi+4420]
; Line 245
	fadd	DWORD PTR _x_tmp$[esp+28]
	fstp	DWORD PTR [esi+4412]
	call	?is_sprite_ng@MaiMarioSprite@@QAEHXZ	; MaiMarioSprite::is_sprite_ng
	test	eax, eax
	jne	SHORT $LN8@UpdatePosi
$LN7@UpdatePosi:
; Line 249
	fld	DWORD PTR [esi+4428]
; Line 254
	mov	DWORD PTR [esi+4408], ebx
	fadd	DWORD PTR [esi+4420]
	fstp	DWORD PTR [esi+4420]
	fld	DWORD PTR [esi+4416]
	fstp	DWORD PTR _y_tmp$[esp+24]
	fld	DWORD PTR [esi+4424]
	fadd	DWORD PTR [esi+4416]
	fstp	DWORD PTR [esi+4416]
; Line 256
	fldz
	fcomp	DWORD PTR [esi+4424]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN54@UpdatePosi
	push	esi
	call	?is_sprite_ng@MaiMarioSprite@@QAEHXZ	; MaiMarioSprite::is_sprite_ng
	test	eax, eax
	je	SHORT $LN54@UpdatePosi
; Line 259
	cmp	DWORD PTR [esi+4400], 2
	mov	DWORD PTR [esi+4408], 1
	jne	SHORT $LN54@UpdatePosi
	mov	DWORD PTR [esi+4400], ebx
	mov	DWORD PTR [esi+360], ebx
$LN54@UpdatePosi:
; Line 262
	push	esi
	call	?is_sprite_ng@MaiMarioSprite@@QAEHXZ	; MaiMarioSprite::is_sprite_ng
	test	eax, eax
	je	SHORT $LN3@UpdatePosi
$LN4@UpdatePosi:
; Line 264
	fld	DWORD PTR [esi+4424]
	push	esi
	fmul	QWORD PTR __real@3fecccccc0000000
	fstp	DWORD PTR tv553[esp+28]
	fld	DWORD PTR tv553[esp+28]
	fst	DWORD PTR [esi+4424]
; Line 266
	fadd	DWORD PTR _y_tmp$[esp+28]
	fstp	DWORD PTR [esi+4416]
	call	?is_sprite_ng@MaiMarioSprite@@QAEHXZ	; MaiMarioSprite::is_sprite_ng
	test	eax, eax
	jne	SHORT $LN4@UpdatePosi
$LN3@UpdatePosi:
; Line 271
	mov	eax, DWORD PTR [esi+28]
	fld	DWORD PTR [esi+4432]
	fadd	DWORD PTR [esi+4424]
	cdq
	sub	eax, edx
	sar	eax, 1
	fstp	DWORD PTR [esi+4424]
	mov	DWORD PTR tv618[esp+24], eax
	fld	DWORD PTR [esi+4412]
	fisub	DWORD PTR tv618[esp+24]
	call	__ftol2_sse
; Line 272
	fld	DWORD PTR [esi+4416]
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv607[esp+24], eax
	mov	DWORD PTR [esi+60], ebx
	fisub	DWORD PTR tv607[esp+24]
	call	__ftol2_sse
; Line 276
	fld	DWORD PTR [esi+4412]
	mov	DWORD PTR [esi+64], eax
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, ebx
	mov	DWORD PTR [esi+60], ecx
	call	__ftol2_sse
	sub	eax, 200				; 000000c8H
; Line 277
	jns	SHORT $LN2@UpdatePosi
	xor	eax, eax
$LN2@UpdatePosi:
; Line 278
	mov	edx, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	ecx, DWORD PTR [edx+64]
	imul	ecx, DWORD PTR [edx+52]
	lea	esi, DWORD PTR [eax+400]
	cmp	esi, ecx
	jl	SHORT $LN1@UpdatePosi
	lea	eax, DWORD PTR [ecx-400]
$LN1@UpdatePosi:
; Line 280
	pop	edi
	neg	eax
	pop	esi
	mov	DWORD PTR [edx+72], eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?UpdatePosition@MaiMarioSprite@@UAEXUtagRECT@@_N@Z ENDP	; MaiMarioSprite::UpdatePosition
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0MaiMarioSprite@@QAE@PAD@Z			; MaiMarioSprite::MaiMarioSprite
; Function compile flags: /Ogtp
;	COMDAT ??0MaiMarioSprite@@QAE@PAD@Z
_TEXT	SEGMENT
__$ArrayPad$ = -4					; size = 4
??0MaiMarioSprite@@QAE@PAD@Z PROC			; MaiMarioSprite::MaiMarioSprite, COMDAT
; _this$ = edi
; _fileName$ = ecx
; Line 32
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	xor	ebx, ebx
	push	esi
	push	16					; 00000010H
	mov	esi, ecx
	mov	DWORD PTR [edi], OFFSET ??_7CSprite@@6B@
	mov	DWORD PTR [edi+72], ebx
	mov	DWORD PTR [edi+68], ebx
	mov	DWORD PTR [edi+80], 10			; 0000000aH
	mov	DWORD PTR [edi+36], ebx
	mov	DWORD PTR [edi+88], ebx
	mov	BYTE PTR [edi+77], 1
	mov	BYTE PTR [edi+84], bl
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN6@MaiMarioSp
	push	esi
	mov	esi, eax
	call	??0CGdiBmp@@QAE@PAD@Z			; CGdiBmp::CGdiBmp
	jmp	SHORT $LN7@MaiMarioSp
$LN6@MaiMarioSp:
	xor	eax, eax
$LN7@MaiMarioSp:
; Line 33
	push	4296					; 000010c8H
	mov	DWORD PTR [edi+12], eax
	lea	eax, DWORD PTR [edi+104]
	push	ebx
	push	eax
	mov	DWORD PTR [edi+16], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	WORD PTR [edi+96], bx
	mov	DWORD PTR [edi+100], ebx
	mov	DWORD PTR [edi], OFFSET ??_7MaiMarioSprite@@6B@
	call	_memset
; Line 37
	fld	DWORD PTR __real@42200000
	mov	DWORD PTR [edi+4400], ebx
	mov	DWORD PTR [edi+4404], ebx
	mov	DWORD PTR [edi+4408], ebx
	fst	DWORD PTR [edi+4412]
; Line 46
	mov	eax, DWORD PTR [edi+4392]
	fstp	DWORD PTR [edi+4416]
	fldz
	mov	DWORD PTR [edi+4396], 16		; 00000010H
	fst	DWORD PTR [edi+4428]
	add	esp, 12					; 0000000cH
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [edi+4432]
	fst	DWORD PTR [edi+4420]
	fstp	DWORD PTR [edi+4424]
	mov	DWORD PTR [edi+eax*4+4328], ebx
	mov	ecx, DWORD PTR [edi+4392]
	imul	ecx, 264				; 00000108H
	mov	DWORD PTR [ecx+edi+104], ebx
	mov	edx, DWORD PTR [edi+4392]
	imul	edx, 264				; 00000108H
	mov	DWORD PTR [edx+edi+360], ebx
	mov	ecx, DWORD PTR [edi+4392]
	imul	ecx, 264				; 00000108H
	mov	eax, 1
	mov	DWORD PTR [ecx+edi+364], eax
	add	DWORD PTR [edi+4392], eax
	mov	ecx, DWORD PTR [edi+4392]
; Line 48
	mov	DWORD PTR [edi+ecx*4+4328], eax
	mov	edx, DWORD PTR [edi+4392]
	imul	edx, 264				; 00000108H
	mov	DWORD PTR [edx+edi+104], eax
	mov	ecx, DWORD PTR [edi+4392]
	imul	ecx, 264				; 00000108H
	mov	DWORD PTR [ecx+edi+108], 2
	mov	ecx, DWORD PTR [edi+4392]
	imul	ecx, 264				; 00000108H
	mov	edx, 3
	mov	DWORD PTR [ecx+edi+112], edx
	mov	ecx, DWORD PTR [edi+4392]
	imul	ecx, 264				; 00000108H
	mov	DWORD PTR [ecx+edi+116], 4
	mov	esi, DWORD PTR [edi+4392]
	imul	esi, 264				; 00000108H
	mov	ecx, 5
	mov	DWORD PTR [esi+edi+120], ecx
	mov	esi, DWORD PTR [edi+4392]
	imul	esi, 264				; 00000108H
	mov	DWORD PTR [esi+edi+360], ebx
	mov	esi, DWORD PTR [edi+4392]
	imul	esi, 264				; 00000108H
	mov	DWORD PTR [esi+edi+364], ecx
	add	DWORD PTR [edi+4392], eax
	mov	ecx, DWORD PTR [edi+4392]
; Line 50
	mov	DWORD PTR [edi+ecx*4+4328], 2
	mov	ecx, DWORD PTR [edi+4392]
	imul	ecx, 264				; 00000108H
	mov	DWORD PTR [ecx+edi+104], 6
	mov	ecx, DWORD PTR [edi+4392]
	imul	ecx, 264				; 00000108H
	mov	DWORD PTR [ecx+edi+360], ebx
	mov	ecx, DWORD PTR [edi+4392]
	imul	ecx, 264				; 00000108H
	mov	DWORD PTR [ecx+edi+364], eax
	add	DWORD PTR [edi+4392], eax
	mov	ecx, DWORD PTR [edi+4392]
; Line 52
	mov	DWORD PTR [edi+ecx*4+4328], edx
	mov	edx, DWORD PTR [edi+4392]
	imul	edx, 264				; 00000108H
	mov	DWORD PTR [edx+edi+104], 7
	mov	ecx, DWORD PTR [edi+4392]
	imul	ecx, 264				; 00000108H
	mov	DWORD PTR [ecx+edi+360], ebx
	mov	edx, DWORD PTR [edi+4392]
; Line 56
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	imul	edx, 264				; 00000108H
	mov	DWORD PTR [edx+edi+364], eax
	add	DWORD PTR [edi+4392], eax
	pop	esi
	mov	BYTE PTR [edi+4436], bl
	xor	ecx, ebp
	mov	DWORD PTR ?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A, edi ; main_sprite_fj3rfr3289jf
	mov	eax, edi
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??0MaiMarioSprite@@QAE@PAD@Z ENDP			; MaiMarioSprite::MaiMarioSprite
; Function compile flags: /Ogtp
;	COMDAT ?DrawAnimation@MaiMarioSprite@@UAEXPAUHDC__@@@Z
_TEXT	SEGMENT
_hDC$ = 8						; size = 4
?DrawAnimation@MaiMarioSprite@@UAEXPAUHDC__@@@Z PROC	; MaiMarioSprite::DrawAnimation, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
; Line 71
	mov	eax, DWORD PTR [ecx+4400]
	mov	edx, eax
	imul	edx, 264				; 00000108H
	push	esi
	mov	esi, eax
	shl	esi, 5
	add	esi, eax
	mov	eax, DWORD PTR [edx+ecx+360]
	lea	edx, DWORD PTR [eax+esi*2]
	mov	eax, DWORD PTR [ecx+edx*4+104]
	mov	DWORD PTR [ecx+36], eax
	pop	esi
; Line 73
	pop	ebp
; Line 72
	jmp	?DrawAnimation@CSprite@@UAEXPAUHDC__@@@Z ; CSprite::DrawAnimation
?DrawAnimation@MaiMarioSprite@@UAEXPAUHDC__@@@Z ENDP	; MaiMarioSprite::DrawAnimation
END
