; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\Administrator\Documents\Visual Studio 2010\Projects\SuperMario__\SuperMario_\SuperMario\SuperMario.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?SetFrameSpeed@CEngine@@QAEXH@Z			; CEngine::SetFrameSpeed
PUBLIC	?getMapLevel@CMap@@QAEHXZ			; CMap::getMapLevel
PUBLIC	?setMapLevel@CMap@@QAEXH@Z			; CMap::setMapLevel
PUBLIC	?GetWindow@CEngine@@QAEPAUHWND__@@XZ		; CEngine::GetWindow
PUBLIC	?GetWidth@CEngine@@QAEHXZ			; CEngine::GetWidth
PUBLIC	?GetHeight@CEngine@@QAEHXZ			; CEngine::GetHeight
PUBLIC	?Stop@CDxSoundBuffer@@QAE_NXZ			; CDxSoundBuffer::Stop
PUBLIC	?SetToBegin@CDxSoundBuffer@@QAE_NXZ		; CDxSoundBuffer::SetToBegin
PUBLIC	?GetIsGoingToDeath@MaiMarioSprite@@QAE_NXZ	; MaiMarioSprite::GetIsGoingToDeath
PUBLIC	?SetIsGoingToDeath@MaiMarioSprite@@QAEX_N@Z	; MaiMarioSprite::SetIsGoingToDeath
PUBLIC	?IsAlive@CDxSoundBuffer@@QBE_NXZ		; CDxSoundBuffer::IsAlive
PUBLIC	?getBmpHeight@CGdiBmp@@QAEHXZ			; CGdiBmp::getBmpHeight
PUBLIC	?getPosX@MaiMarioSprite@@QAEMXZ			; MaiMarioSprite::getPosX
PUBLIC	?coin@@3PAVCSprite@@A				; coin
PUBLIC	?ScreenBoundry@@3UtagRECT@@A			; ScreenBoundry
PUBLIC	?currentLevel@@3HA				; currentLevel
PUBLIC	?LifeRemain@@3HA				; LifeRemain
PUBLIC	?inWelcome@@3_NA				; inWelcome
PUBLIC	?InPlayingTimeSpend@@3HA			; InPlayingTimeSpend
PUBLIC	?oldTimeCount@@3JA				; oldTimeCount
PUBLIC	?TotalScores@@3HA				; TotalScores
PUBLIC	?inPlayScore@@3HA				; inPlayScore
PUBLIC	?inPlaying@@3_NA				; inPlaying
PUBLIC	?coinTicknew@@3JA				; coinTicknew
PUBLIC	?UpGgradeLevel@@3_NA				; UpGgradeLevel
PUBLIC	?isGettingCoin@@3_NA				; isGettingCoin
PUBLIC	?about@@3PAVCGdiBmp@@A				; about
PUBLIC	?WelcomeScreenLogo@@3PAVCGdiBmp@@A		; WelcomeScreenLogo
PUBLIC	?inLevelBegin@@3_NA				; inLevelBegin
PUBLIC	?dragDistance@@3HA				; dragDistance
PUBLIC	?PlayerBoundary@@3UtagRECT@@A			; PlayerBoundary
PUBLIC	?Player@@3PAVCSprite@@A				; Player
PUBLIC	?coinCount@@3HA					; coinCount
PUBLIC	?WinSize@@3UtagSIZE@@A				; WinSize
PUBLIC	?pEngine@@3PAVCEngine@@A			; pEngine
PUBLIC	?coinTickold@@3JA				; coinTickold
PUBLIC	?isDragingFlag@@3_NA				; isDragingFlag
PUBLIC	?bufferDC@@3PAUHDC__@@A				; bufferDC
PUBLIC	?map@@3PAVCMap@@A				; map
PUBLIC	?newTimeCount@@3JA				; newTimeCount
PUBLIC	?isDelayCollision@@3_NA				; isDelayCollision
PUBLIC	?mario_Info@@3PAVCGdiBmp@@A			; mario_Info
PUBLIC	?bufferBitmap@@3PAUHBITMAP__@@A			; bufferBitmap
PUBLIC	?LevelEndSoundTime@@3PAHA			; LevelEndSoundTime
PUBLIC	??_C@_0CK@HIDACDCP@SuperMario?5Version?51?40?5By?5Ncu?$CIC?$CJ@ ; `string'
PUBLIC	??_C@_0L@FNKLPHN@SuperMario?$AA@		; `string'
PUBLIC	??_C@_0BE@EPPKIMCK@?4?2res?2LogoMario?4bmp?$AA@	; `string'
PUBLIC	??_C@_0BF@MGBCJANP@?4?2res?2mario_Info?4bmp?$AA@ ; `string'
PUBLIC	??_C@_0BA@DNEODNKA@?4?2res?2about?4bmp?$AA@	; `string'
PUBLIC	??_C@_0BB@BKFLLPMI@?4?2res?2mario_?4bmp?$AA@	; `string'
PUBLIC	??_C@_0BF@LFDJJNLG@?4?2res?2sound?2Jump?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BF@FOKHFNPG@?4?2res?2sound?2Dead?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BP@GHFOEPGA@?4?2res?2sound?2GameTotallyEnd?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KBONIJFG@?4?2res?2sound?2GameOver?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BN@KJEKLBFP@?4?2res?2sound?2DragFlagPole?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BM@EPCNOPI@?4?2res?2sound?2StepOnEnemy?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BL@FJAPLABD@?4?2res?2sound?2KnockBrick?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FAOEJPDG@?4?2res?2sound?2GoldCoin?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BF@LKPMFGFA@?4?2res?2map?2level1?4dat?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LHOFLGHE@?4?2res?2sound?2BGground?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BM@HOHJKIFP@?4?2res?2sound?2EnterCastle?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BF@DMGICEPO@?4?2res?2map?2level2?4dat?$AA@ ; `string'
PUBLIC	??_C@_0BO@JJGGKPHG@?4?2res?2sound?2BGUnderGround?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BK@LKILOFCG@?4?2res?2sound?2EnterTube?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BF@PHDEPHFL@?4?2res?2map?2level3?4dat?$AA@ ; `string'
PUBLIC	??_C@_0BF@KKCENHLJ@?4?2res?2coin_black?4bmp?$AA@ ; `string'
PUBLIC	??_C@_0BE@IOLHNHAP@?4?2res?2coin_blue?4bmp?$AA@	; `string'
PUBLIC	??_C@_0BL@MDCPIFFP@Begin?$FLEnter?$FN?5?5?5?5?5?5About?$FLA?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CC@HOFDEANM@MARIO?5?3?5?$CF03d?5?5?5?5?5?5?5?5?5?5?5WORLD?5?3?5?$CF@ ; `string'
PUBLIC	??_C@_04KOJLAJHO@X?5?$CFd?$AA@			; `string'
PUBLIC	??_C@_04DAFKCFMK@YOU?5?$AA@			; `string'
PUBLIC	??_C@_08CNOJCEOH@WIN?$CB?5?5?5?5?$AA@		; `string'
PUBLIC	??_C@_09FEIICGGB@LOSE?$CB?5?5?5?5?$AA@		; `string'
PUBLIC	??_C@_0BH@MAHEMHLN@Push?5Enter?5To?5Restart?$CB?$AA@ ; `string'
PUBLIC	??_C@_08JCKLBEEE@?N?$KC?H?m?Q?E?$LK?Z?$AA@	; `string'
PUBLIC	??_C@_0CD@JIDBELEF@MARIO?5?3?5?$CF03d?5?5?5?5?5?5?5?5?5?5?5TIME?5?3?5?$CF0@ ; `string'
EXTRN	_srand:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__BitBlt@36:PROC
EXTRN	_atexit:PROC
?coin@@3PAVCSprite@@A DD 01H DUP (?)			; coin
?ScreenBoundry@@3UtagRECT@@A DB 010H DUP (?)		; ScreenBoundry
?currentLevel@@3HA DD 01H DUP (?)			; currentLevel
?LifeRemain@@3HA DD 01H DUP (?)				; LifeRemain
?inWelcome@@3_NA DB 01H DUP (?)				; inWelcome
	ALIGN	4

?InPlayingTimeSpend@@3HA DD 01H DUP (?)			; InPlayingTimeSpend
?oldTimeCount@@3JA DD 01H DUP (?)			; oldTimeCount
?TotalScores@@3HA DD 01H DUP (?)			; TotalScores
?inPlayScore@@3HA DD 01H DUP (?)			; inPlayScore
?inPlaying@@3_NA DB 01H DUP (?)				; inPlaying
	ALIGN	4

?coinTicknew@@3JA DD 01H DUP (?)			; coinTicknew
?UpGgradeLevel@@3_NA DB 01H DUP (?)			; UpGgradeLevel
	ALIGN	4

?isGettingCoin@@3_NA DB 01H DUP (?)			; isGettingCoin
	ALIGN	4

?about@@3PAVCGdiBmp@@A DD 01H DUP (?)			; about
?WelcomeScreenLogo@@3PAVCGdiBmp@@A DD 01H DUP (?)	; WelcomeScreenLogo
?inLevelBegin@@3_NA DB 01H DUP (?)			; inLevelBegin
	ALIGN	4

?dragDistance@@3HA DD 01H DUP (?)			; dragDistance
?PlayerBoundary@@3UtagRECT@@A DB 010H DUP (?)		; PlayerBoundary
?Player@@3PAVCSprite@@A DD 01H DUP (?)			; Player
?coinCount@@3HA DD 01H DUP (?)				; coinCount
?WinSize@@3UtagSIZE@@A DQ 01H DUP (?)			; WinSize
?pEngine@@3PAVCEngine@@A DD 01H DUP (?)			; pEngine
?coinTickold@@3JA DD 01H DUP (?)			; coinTickold
?isDragingFlag@@3_NA DB 01H DUP (?)			; isDragingFlag
	ALIGN	4

?bufferDC@@3PAUHDC__@@A DD 01H DUP (?)			; bufferDC
?map@@3PAVCMap@@A DD 01H DUP (?)			; map
?newTimeCount@@3JA DD 01H DUP (?)			; newTimeCount
?isDelayCollision@@3_NA DB 01H DUP (?)			; isDelayCollision
	ALIGN	4

?mario_Info@@3PAVCGdiBmp@@A DD 01H DUP (?)		; mario_Info
?bufferBitmap@@3PAUHBITMAP__@@A DD 01H DUP (?)		; bufferBitmap
;	COMDAT ??_C@_0CD@JIDBELEF@MARIO?5?3?5?$CF03d?5?5?5?5?5?5?5?5?5?5?5TIME?5?3?5?$CF0@
CONST	SEGMENT
??_C@_0CD@JIDBELEF@MARIO?5?3?5?$CF03d?5?5?5?5?5?5?5?5?5?5?5TIME?5?3?5?$CF0@ DB 'M'
	DB	'ARIO : %03d           TIME : %03d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCKLBEEE@?N?$KC?H?m?Q?E?$LK?Z?$AA@
CONST	SEGMENT
??_C@_08JCKLBEEE@?N?$KC?H?m?Q?E?$LK?Z?$AA@ DB 0ceH, 0a2H, 0c8H, 0edH, 0d1H
	DB	0c5H, 0baH, 0daH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MAHEMHLN@Push?5Enter?5To?5Restart?$CB?$AA@
CONST	SEGMENT
??_C@_0BH@MAHEMHLN@Push?5Enter?5To?5Restart?$CB?$AA@ DB 'Push Enter To Re'
	DB	'start!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09FEIICGGB@LOSE?$CB?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_09FEIICGGB@LOSE?$CB?5?5?5?5?$AA@ DB 'LOSE!    ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CNOJCEOH@WIN?$CB?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_08CNOJCEOH@WIN?$CB?5?5?5?5?$AA@ DB 'WIN!    ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DAFKCFMK@YOU?5?$AA@
CONST	SEGMENT
??_C@_04DAFKCFMK@YOU?5?$AA@ DB 'YOU ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KOJLAJHO@X?5?$CFd?$AA@
CONST	SEGMENT
??_C@_04KOJLAJHO@X?5?$CFd?$AA@ DB 'X %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HOFDEANM@MARIO?5?3?5?$CF03d?5?5?5?5?5?5?5?5?5?5?5WORLD?5?3?5?$CF@
CONST	SEGMENT
??_C@_0CC@HOFDEANM@MARIO?5?3?5?$CF03d?5?5?5?5?5?5?5?5?5?5?5WORLD?5?3?5?$CF@ DB 'M'
	DB	'ARIO : %03d           WORLD : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MDCPIFFP@Begin?$FLEnter?$FN?5?5?5?5?5?5About?$FLA?$FN?$AA@
CONST	SEGMENT
??_C@_0BL@MDCPIFFP@Begin?$FLEnter?$FN?5?5?5?5?5?5About?$FLA?$FN?$AA@ DB 'B'
	DB	'egin[Enter]      About[A]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IOLHNHAP@?4?2res?2coin_blue?4bmp?$AA@
CONST	SEGMENT
??_C@_0BE@IOLHNHAP@?4?2res?2coin_blue?4bmp?$AA@ DB '.\res\coin_blue.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KKCENHLJ@?4?2res?2coin_black?4bmp?$AA@
CONST	SEGMENT
??_C@_0BF@KKCENHLJ@?4?2res?2coin_black?4bmp?$AA@ DB '.\res\coin_black.bmp'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHDEPHFL@?4?2res?2map?2level3?4dat?$AA@
CONST	SEGMENT
??_C@_0BF@PHDEPHFL@?4?2res?2map?2level3?4dat?$AA@ DB '.\res\map\level3.da'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LKILOFCG@?4?2res?2sound?2EnterTube?4wav?$AA@
CONST	SEGMENT
??_C@_0BK@LKILOFCG@?4?2res?2sound?2EnterTube?4wav?$AA@ DB '.\res\sound\En'
	DB	'terTube.wav', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JJGGKPHG@?4?2res?2sound?2BGUnderGround?4wav?$AA@
CONST	SEGMENT
??_C@_0BO@JJGGKPHG@?4?2res?2sound?2BGUnderGround?4wav?$AA@ DB '.\res\soun'
	DB	'd\BGUnderGround.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DMGICEPO@?4?2res?2map?2level2?4dat?$AA@
CONST	SEGMENT
??_C@_0BF@DMGICEPO@?4?2res?2map?2level2?4dat?$AA@ DB '.\res\map\level2.da'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HOHJKIFP@?4?2res?2sound?2EnterCastle?4wav?$AA@
CONST	SEGMENT
??_C@_0BM@HOHJKIFP@?4?2res?2sound?2EnterCastle?4wav?$AA@ DB '.\res\sound\'
	DB	'EnterCastle.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LHOFLGHE@?4?2res?2sound?2BGground?4wav?$AA@
CONST	SEGMENT
??_C@_0BJ@LHOFLGHE@?4?2res?2sound?2BGground?4wav?$AA@ DB '.\res\sound\BGg'
	DB	'round.wav', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LKPMFGFA@?4?2res?2map?2level1?4dat?$AA@
CONST	SEGMENT
??_C@_0BF@LKPMFGFA@?4?2res?2map?2level1?4dat?$AA@ DB '.\res\map\level1.da'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FAOEJPDG@?4?2res?2sound?2GoldCoin?4wav?$AA@
CONST	SEGMENT
??_C@_0BJ@FAOEJPDG@?4?2res?2sound?2GoldCoin?4wav?$AA@ DB '.\res\sound\Gol'
	DB	'dCoin.wav', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FJAPLABD@?4?2res?2sound?2KnockBrick?4wav?$AA@
CONST	SEGMENT
??_C@_0BL@FJAPLABD@?4?2res?2sound?2KnockBrick?4wav?$AA@ DB '.\res\sound\K'
	DB	'nockBrick.wav', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EPCNOPI@?4?2res?2sound?2StepOnEnemy?4wav?$AA@
CONST	SEGMENT
??_C@_0BM@EPCNOPI@?4?2res?2sound?2StepOnEnemy?4wav?$AA@ DB '.\res\sound\S'
	DB	'tepOnEnemy.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KJEKLBFP@?4?2res?2sound?2DragFlagPole?4wav?$AA@
CONST	SEGMENT
??_C@_0BN@KJEKLBFP@?4?2res?2sound?2DragFlagPole?4wav?$AA@ DB '.\res\sound'
	DB	'\DragFlagPole.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KBONIJFG@?4?2res?2sound?2GameOver?4wav?$AA@
CONST	SEGMENT
??_C@_0BJ@KBONIJFG@?4?2res?2sound?2GameOver?4wav?$AA@ DB '.\res\sound\Gam'
	DB	'eOver.wav', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GHFOEPGA@?4?2res?2sound?2GameTotallyEnd?4wav?$AA@
CONST	SEGMENT
??_C@_0BP@GHFOEPGA@?4?2res?2sound?2GameTotallyEnd?4wav?$AA@ DB '.\res\sou'
	DB	'nd\GameTotallyEnd.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FOKHFNPG@?4?2res?2sound?2Dead?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@FOKHFNPG@?4?2res?2sound?2Dead?4wav?$AA@ DB '.\res\sound\Dead.wa'
	DB	'v', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LFDJJNLG@?4?2res?2sound?2Jump?4wav?$AA@
CONST	SEGMENT
??_C@_0BF@LFDJJNLG@?4?2res?2sound?2Jump?4wav?$AA@ DB '.\res\sound\Jump.wa'
	DB	'v', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BKFLLPMI@?4?2res?2mario_?4bmp?$AA@
CONST	SEGMENT
??_C@_0BB@BKFLLPMI@?4?2res?2mario_?4bmp?$AA@ DB '.\res\mario_.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DNEODNKA@?4?2res?2about?4bmp?$AA@
CONST	SEGMENT
??_C@_0BA@DNEODNKA@?4?2res?2about?4bmp?$AA@ DB '.\res\about.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MGBCJANP@?4?2res?2mario_Info?4bmp?$AA@
CONST	SEGMENT
??_C@_0BF@MGBCJANP@?4?2res?2mario_Info?4bmp?$AA@ DB '.\res\mario_Info.bmp'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EPPKIMCK@?4?2res?2LogoMario?4bmp?$AA@
CONST	SEGMENT
??_C@_0BE@EPPKIMCK@?4?2res?2LogoMario?4bmp?$AA@ DB '.\res\LogoMario.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNKLPHN@SuperMario?$AA@
CONST	SEGMENT
??_C@_0L@FNKLPHN@SuperMario?$AA@ DB 'SuperMario', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HIDACDCP@SuperMario?5Version?51?40?5By?5Ncu?$CIC?$CJ@
CONST	SEGMENT
??_C@_0CK@HIDACDCP@SuperMario?5Version?51?40?5By?5Ncu?$CIC?$CJ@ DB 'Super'
	DB	'Mario Version 1.0 By Ncu(C)2012-2013', 00H	; `string'
?LevelEndSoundTime@@3PAHA DD 01388H			; LevelEndSoundTime
	DD	0bb8H
	DD	01388H
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
;	COMDAT ?getPosX@MaiMarioSprite@@QAEMXZ
_TEXT	SEGMENT
?getPosX@MaiMarioSprite@@QAEMXZ PROC			; MaiMarioSprite::getPosX, COMDAT
; _this$ = eax
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\maimariosprite.h
; Line 61
	fld	DWORD PTR [eax+4412]
	ret	0
?getPosX@MaiMarioSprite@@QAEMXZ ENDP			; MaiMarioSprite::getPosX
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?SetIsGoingToDeath@MaiMarioSprite@@QAEX_N@Z
_TEXT	SEGMENT
?SetIsGoingToDeath@MaiMarioSprite@@QAEX_N@Z PROC	; MaiMarioSprite::SetIsGoingToDeath, COMDAT
; _this$ = eax
; Line 57
	mov	BYTE PTR [eax+4436], 0
	ret	0
?SetIsGoingToDeath@MaiMarioSprite@@QAEX_N@Z ENDP	; MaiMarioSprite::SetIsGoingToDeath
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetIsGoingToDeath@MaiMarioSprite@@QAE_NXZ
_TEXT	SEGMENT
?GetIsGoingToDeath@MaiMarioSprite@@QAE_NXZ PROC		; MaiMarioSprite::GetIsGoingToDeath, COMDAT
; _this$ = eax
; Line 56
	mov	al, BYTE PTR [eax+4436]
	ret	0
?GetIsGoingToDeath@MaiMarioSprite@@QAE_NXZ ENDP		; MaiMarioSprite::GetIsGoingToDeath
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?IsAlive@CDxSoundBuffer@@QBE_NXZ
_TEXT	SEGMENT
?IsAlive@CDxSoundBuffer@@QBE_NXZ PROC			; CDxSoundBuffer::IsAlive, COMDAT
; _this$ = ecx
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cdxsound.h
; Line 50
	xor	eax, eax
	cmp	DWORD PTR [ecx], eax
	setne	al
	ret	0
?IsAlive@CDxSoundBuffer@@QBE_NXZ ENDP			; CDxSoundBuffer::IsAlive
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?SetToBegin@CDxSoundBuffer@@QAE_NXZ
_TEXT	SEGMENT
?SetToBegin@CDxSoundBuffer@@QAE_NXZ PROC		; CDxSoundBuffer::SetToBegin, COMDAT
; Line 48
	mov	eax, DWORD PTR ?BGSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+52]
	push	0
	push	eax
	call	edx
	neg	eax
	sbb	eax, eax
	inc	eax
	ret	0
?SetToBegin@CDxSoundBuffer@@QAE_NXZ ENDP		; CDxSoundBuffer::SetToBegin
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Stop@CDxSoundBuffer@@QAE_NXZ
_TEXT	SEGMENT
?Stop@CDxSoundBuffer@@QAE_NXZ PROC			; CDxSoundBuffer::Stop, COMDAT
; Line 46
	mov	eax, DWORD PTR ?BGSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+72]
	push	eax
	call	edx
	neg	eax
	sbb	eax, eax
	inc	eax
	ret	0
?Stop@CDxSoundBuffer@@QAE_NXZ ENDP			; CDxSoundBuffer::Stop
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?setMapLevel@CMap@@QAEXH@Z
_TEXT	SEGMENT
?setMapLevel@CMap@@QAEXH@Z PROC				; CMap::setMapLevel, COMDAT
; _s$ = ecx
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cmap.h
; Line 58
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	DWORD PTR [eax+16], ecx
	ret	0
?setMapLevel@CMap@@QAEXH@Z ENDP				; CMap::setMapLevel
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?getMapLevel@CMap@@QAEHXZ
_TEXT	SEGMENT
?getMapLevel@CMap@@QAEHXZ PROC				; CMap::getMapLevel, COMDAT
; Line 57
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	eax, DWORD PTR [eax+16]
	ret	0
?getMapLevel@CMap@@QAEHXZ ENDP				; CMap::getMapLevel
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetHeight@CEngine@@QAEHXZ
_TEXT	SEGMENT
?GetHeight@CEngine@@QAEHXZ PROC				; CEngine::GetHeight, COMDAT
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cengine.h
; Line 97
	mov	eax, DWORD PTR ?pEngine@@3PAVCEngine@@A	; pEngine
	mov	eax, DWORD PTR [eax+152]
; Line 98
	ret	0
?GetHeight@CEngine@@QAEHXZ ENDP				; CEngine::GetHeight
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetWidth@CEngine@@QAEHXZ
_TEXT	SEGMENT
?GetWidth@CEngine@@QAEHXZ PROC				; CEngine::GetWidth, COMDAT
; Line 93
	mov	eax, DWORD PTR ?pEngine@@3PAVCEngine@@A	; pEngine
	mov	eax, DWORD PTR [eax+148]
; Line 94
	ret	0
?GetWidth@CEngine@@QAEHXZ ENDP				; CEngine::GetWidth
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetWindow@CEngine@@QAEPAUHWND__@@XZ
_TEXT	SEGMENT
?GetWindow@CEngine@@QAEPAUHWND__@@XZ PROC		; CEngine::GetWindow, COMDAT
; Line 85
	mov	eax, DWORD PTR ?pEngine@@3PAVCEngine@@A	; pEngine
	mov	eax, DWORD PTR [eax+208]
; Line 86
	ret	0
?GetWindow@CEngine@@QAEPAUHWND__@@XZ ENDP		; CEngine::GetWindow
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?SetFrameSpeed@CEngine@@QAEXH@Z
_TEXT	SEGMENT
?SetFrameSpeed@CEngine@@QAEXH@Z PROC			; CEngine::SetFrameSpeed, COMDAT
; Line 81
	mov	eax, DWORD PTR ?pEngine@@3PAVCEngine@@A	; pEngine
	mov	DWORD PTR [eax+204], 66			; 00000042H
; Line 82
	ret	0
?SetFrameSpeed@CEngine@@QAEXH@Z ENDP			; CEngine::SetFrameSpeed
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?getBmpHeight@CGdiBmp@@QAEHXZ
_TEXT	SEGMENT
?getBmpHeight@CGdiBmp@@QAEHXZ PROC			; CGdiBmp::getBmpHeight, COMDAT
; _this$ = eax
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cgdibmp.h
; Line 41
	mov	eax, DWORD PTR [eax+12]
	ret	0
?getBmpHeight@CGdiBmp@@QAEHXZ ENDP			; CGdiBmp::getBmpHeight
PUBLIC	__$ArrayPad$
PUBLIC	?DrawInPlayingScore@@YAXPAUHDC__@@@Z		; DrawInPlayingScore
; Function compile flags: /Ogtp
;	COMDAT ?DrawInPlayingScore@@YAXPAUHDC__@@@Z
_TEXT	SEGMENT
_Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?DrawInPlayingScore@@YAXPAUHDC__@@@Z PROC		; DrawInPlayingScore, COMDAT
; _OffDC$ = ecx
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\supermario.cpp
; Line 472
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	mov	esi, ecx
; Line 475
	mov	ecx, DWORD PTR ?newTimeCount@@3JA	; newTimeCount
	sub	ecx, DWORD PTR ?oldTimeCount@@3JA	; oldTimeCount
	mov	eax, 274877907				; 10624dd3H
	imul	ecx
	sar	edx, 6
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 476
	mov	edx, DWORD PTR ?inPlayScore@@3HA	; inPlayScore
	push	edi
	mov	ecx, 400				; 00000190H
	sub	ecx, eax
	push	ecx
	push	edx
	mov	DWORD PTR ?InPlayingTimeSpend@@3HA, eax	; InPlayingTimeSpend
	lea	eax, DWORD PTR _Buf$[ebp]
	push	OFFSET ??_C@_0CD@JIDBELEF@MARIO?5?3?5?$CF03d?5?5?5?5?5?5?5?5?5?5?5TIME?5?3?5?$CF0@
	push	eax
	call	_sprintf
; Line 481
	mov	edi, DWORD PTR ?WinSize@@3UtagSIZE@@A
; Line 483
	mov	eax, esp
	mov	ecx, 10					; 0000000aH
	mov	DWORD PTR [eax], ecx
	mov	edx, ecx
	lea	ebx, DWORD PTR [ecx+38]
	mov	DWORD PTR [eax+4], edx
	add	edi, -10				; fffffff6H
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ebx
	push	19					; 00000013H
	mov	ecx, OFFSET ??_C@_04JBPPCJCH@?$LK?Z?L?e?$AA@
	lea	ebx, DWORD PTR _Buf$[ebp]
	call	?DrawWords@CGdiBmp@@SAXPAUHDC__@@PADKHPBDUtagRECT@@H@Z ; CGdiBmp::DrawWords
; Line 484
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawInPlayingScore@@YAXPAUHDC__@@@Z ENDP		; DrawInPlayingScore
_TEXT	ENDS
PUBLIC	_OffDC$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?DrawGameTotallyEnd@@YAXPAUHDC__@@@Z		; DrawGameTotallyEnd
; Function compile flags: /Ogtp
;	COMDAT ?DrawGameTotallyEnd@@YAXPAUHDC__@@@Z
_TEXT	SEGMENT
_rect$ = -108						; size = 16
_OffDC$GSCopy$ = -92					; size = 4
_BGRect$ = -88						; size = 16
_Buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
?DrawGameTotallyEnd@@YAXPAUHDC__@@@Z PROC		; DrawGameTotallyEnd, COMDAT
; _OffDC$ = ecx
; Line 447
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 452
	mov	eax, DWORD PTR ?WinSize@@3UtagSIZE@@A
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx
	add	eax, -10				; fffffff6H
; Line 455
	xor	edi, edi
	push	edi
	mov	DWORD PTR _OffDC$GSCopy$[ebp], ebx
	mov	DWORD PTR _rect$[ebp+4], 10		; 0000000aH
	mov	DWORD PTR _rect$[ebp+8], eax
	call	DWORD PTR __imp__CreateSolidBrush@4
; Line 457
	mov	DWORD PTR _BGRect$[ebp], edi
; Line 458
	mov	DWORD PTR _BGRect$[ebp+4], edi
; Line 459
	push	edi
	mov	edi, DWORD PTR __imp__GetSystemMetrics@4
	mov	esi, eax
	call	edi
; Line 460
	push	1
	mov	DWORD PTR _BGRect$[ebp+8], eax
	call	edi
; Line 461
	push	esi
	lea	ecx, DWORD PTR _BGRect$[ebp]
	push	ecx
	push	ebx
	mov	DWORD PTR _BGRect$[ebp+12], eax
	call	DWORD PTR __imp__FillRect@12
; Line 463
	mov	edx, DWORD PTR ??_C@_04DAFKCFMK@YOU?5?$AA@
	mov	al, BYTE PTR ??_C@_04DAFKCFMK@YOU?5?$AA@+4
	push	59					; 0000003bH
	lea	ecx, DWORD PTR _Buf$[ebp+5]
	push	0
	push	ecx
	mov	DWORD PTR _Buf$[ebp], edx
	mov	BYTE PTR _Buf$[ebp+4], al
	call	_memset
; Line 465
	lea	eax, DWORD PTR _Buf$[ebp]
	add	esp, 12					; 0000000cH
	dec	eax
	cmp	DWORD PTR ?LifeRemain@@3HA, 0		; LifeRemain
	je	SHORT $LL6@DrawGameTo
$LL5@DrawGameTo:
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL5@DrawGameTo
	mov	edx, DWORD PTR ??_C@_08CNOJCEOH@WIN?$CB?5?5?5?5?$AA@
	mov	ecx, DWORD PTR ??_C@_08CNOJCEOH@WIN?$CB?5?5?5?5?$AA@+4
	mov	DWORD PTR [eax], edx
	mov	dl, BYTE PTR ??_C@_08CNOJCEOH@WIN?$CB?5?5?5?5?$AA@+8
	mov	DWORD PTR [eax+4], ecx
	mov	BYTE PTR [eax+8], dl
; Line 466
	jmp	SHORT $LN1@DrawGameTo
	npad	4
$LL6@DrawGameTo:
; Line 467
	mov	cl, BYTE PTR [eax+1]
	inc	eax
	test	cl, cl
	jne	SHORT $LL6@DrawGameTo
	mov	ecx, DWORD PTR ??_C@_09FEIICGGB@LOSE?$CB?5?5?5?5?$AA@
	mov	edx, DWORD PTR ??_C@_09FEIICGGB@LOSE?$CB?5?5?5?5?$AA@+4
	mov	DWORD PTR [eax], ecx
	mov	cx, WORD PTR ??_C@_09FEIICGGB@LOSE?$CB?5?5?5?5?$AA@+8
	mov	DWORD PTR [eax+4], edx
	mov	WORD PTR [eax+8], cx
$LN1@DrawGameTo:
; Line 468
	lea	edi, DWORD PTR _Buf$[ebp]
	dec	edi
$LL7@DrawGameTo:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL7@DrawGameTo
; Line 469
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	ecx, 5
	mov	esi, OFFSET ??_C@_0BH@MAHEMHLN@Push?5Enter?5To?5Restart?$CB?$AA@
	rep movsd
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, 10					; 0000000aH
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	movsw
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, 48					; 00000030H
	movsb
	mov	esi, DWORD PTR _OffDC$GSCopy$[ebp]
	mov	DWORD PTR [eax+12], ecx
	push	20					; 00000014H
	mov	ecx, OFFSET ??_C@_08JCKLBEEE@?N?$KC?H?m?Q?E?$LK?Z?$AA@
	lea	ebx, DWORD PTR _Buf$[ebp]
	call	?DrawWords@CGdiBmp@@SAXPAUHDC__@@PADKHPBDUtagRECT@@H@Z ; CGdiBmp::DrawWords
; Line 470
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawGameTotallyEnd@@YAXPAUHDC__@@@Z ENDP		; DrawGameTotallyEnd
_TEXT	ENDS
PUBLIC	?UpdateCoinPosition@@YAXXZ			; UpdateCoinPosition
; Function compile flags: /Ogtp
;	COMDAT ?UpdateCoinPosition@@YAXXZ
_TEXT	SEGMENT
_p$ = -16						; size = 8
_nowX$ = -8						; size = 4
_oriX$ = -4						; size = 4
?UpdateCoinPosition@@YAXXZ PROC				; UpdateCoinPosition, COMDAT
; Line 373
	push	ebp
	mov	ebp, esp
; Line 374
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+64]
	sub	esp, 16					; 00000010H
	push	esi
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	eax
; Line 377
	cmp	DWORD PTR ?coinTickold@@3JA, 0		; coinTickold
	mov	esi, DWORD PTR __imp__GetTickCount@0
	jne	SHORT $LN10@UpdateCoin
; Line 378
	call	esi
; Line 379
	mov	ecx, DWORD PTR ?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A ; main_sprite_fj3rfr3289jf
	fld	DWORD PTR [ecx+4412]
	mov	DWORD PTR ?coinTickold@@3JA, eax	; coinTickold
	fstp	DWORD PTR _oriX$[ebp]
$LN10@UpdateCoin:
; Line 381
	call	esi
; Line 382
	mov	edx, DWORD PTR ?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A ; main_sprite_fj3rfr3289jf
	fld	DWORD PTR [edx+4412]
	mov	DWORD PTR ?coinTicknew@@3JA, eax	; coinTicknew
; Line 384
	sub	eax, DWORD PTR ?coinTickold@@3JA	; coinTickold
	fstp	DWORD PTR _nowX$[ebp]
	cmp	eax, 250				; 000000faH
	jg	SHORT $LN4@UpdateCoin
; Line 385
	sub	DWORD PTR _p$[ebp+4], 10		; 0000000aH
	jmp	SHORT $LN16@UpdateCoin
$LN4@UpdateCoin:
; Line 387
	cmp	eax, 500				; 000001f4H
	jg	SHORT $LN16@UpdateCoin
; Line 388
	add	DWORD PTR _p$[ebp+4], 10		; 0000000aH
$LN16@UpdateCoin:
; Line 390
	fld	DWORD PTR _oriX$[ebp]
	fsub	DWORD PTR _nowX$[ebp]
	call	__ftol2_sse
	mov	edx, DWORD PTR _p$[ebp]
; Line 392
	mov	esi, DWORD PTR _p$[ebp+4]
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	add	edx, eax
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR [ecx]
	push	esi
	push	edx
	mov	edx, DWORD PTR [eax+68]
	call	edx
; Line 393
	mov	eax, DWORD PTR ?coinTicknew@@3JA	; coinTicknew
	sub	eax, DWORD PTR ?coinTickold@@3JA	; coinTickold
	pop	esi
	cmp	eax, 500				; 000001f4H
	jl	SHORT $LN1@UpdateCoin
; Line 396
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+100]
	push	0
	mov	BYTE PTR ?isGettingCoin@@3_NA, 0	; isGettingCoin
	mov	DWORD PTR ?coinTickold@@3JA, 0		; coinTickold
	call	eax
$LN1@UpdateCoin:
; Line 398
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateCoinPosition@@YAXXZ ENDP				; UpdateCoinPosition
_TEXT	ENDS
PUBLIC	?ReleaseAll@@YAXXZ				; ReleaseAll
; Function compile flags: /Ogtp
;	COMDAT ?ReleaseAll@@YAXXZ
_TEXT	SEGMENT
?ReleaseAll@@YAXXZ PROC					; ReleaseAll, COMDAT
; Line 322
	mov	ecx, DWORD PTR ?map@@3PAVCMap@@A	; map
	push	edi
	xor	edi, edi
	cmp	ecx, edi
	je	SHORT $LN12@ReleaseAll@2
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	push	1
	call	edx
$LN12@ReleaseAll@2:
; Line 323
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	push	esi
	call	edx
	mov	esi, eax
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, edi
	je	SHORT $LN14@ReleaseAll@2
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	mov	DWORD PTR [esi+4], edi
$LN14@ReleaseAll@2:
; Line 325
	mov	eax, DWORD PTR ?BGSound@@3VCDxSoundBuffer@@A
	pop	esi
	cmp	eax, edi
	je	SHORT $LN20@ReleaseAll@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR ?BGSound@@3VCDxSoundBuffer@@A, edi
$LN20@ReleaseAll@2:
; Line 326
	mov	eax, DWORD PTR ?JumpSound@@3VCDxSoundBuffer@@A
	cmp	eax, edi
	je	SHORT $LN25@ReleaseAll@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR ?JumpSound@@3VCDxSoundBuffer@@A, edi
$LN25@ReleaseAll@2:
; Line 327
	mov	eax, DWORD PTR ?DeadSound@@3VCDxSoundBuffer@@A
	cmp	eax, edi
	je	SHORT $LN30@ReleaseAll@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR ?DeadSound@@3VCDxSoundBuffer@@A, edi
$LN30@ReleaseAll@2:
; Line 328
	mov	eax, DWORD PTR ?GameTotallyEndSound@@3VCDxSoundBuffer@@A
	cmp	eax, edi
	je	SHORT $LN35@ReleaseAll@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR ?GameTotallyEndSound@@3VCDxSoundBuffer@@A, edi
$LN35@ReleaseAll@2:
; Line 329
	mov	eax, DWORD PTR ?GameOverSound@@3VCDxSoundBuffer@@A
	cmp	eax, edi
	je	SHORT $LN40@ReleaseAll@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR ?GameOverSound@@3VCDxSoundBuffer@@A, edi
$LN40@ReleaseAll@2:
; Line 330
	mov	eax, DWORD PTR ?LevelEndSound@@3VCDxSoundBuffer@@A
	cmp	eax, edi
	je	SHORT $LN45@ReleaseAll@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR ?LevelEndSound@@3VCDxSoundBuffer@@A, edi
$LN45@ReleaseAll@2:
; Line 331
	mov	eax, DWORD PTR ?DragFlagPloeSound@@3VCDxSoundBuffer@@A
	cmp	eax, edi
	je	SHORT $LN50@ReleaseAll@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR ?DragFlagPloeSound@@3VCDxSoundBuffer@@A, edi
$LN50@ReleaseAll@2:
; Line 332
	mov	eax, DWORD PTR ?StepOnEnemySound@@3VCDxSoundBuffer@@A
	cmp	eax, edi
	je	SHORT $LN55@ReleaseAll@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR ?StepOnEnemySound@@3VCDxSoundBuffer@@A, edi
$LN55@ReleaseAll@2:
; Line 333
	mov	eax, DWORD PTR ?KnockBrickSound@@3VCDxSoundBuffer@@A
	cmp	eax, edi
	je	SHORT $LN60@ReleaseAll@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
	mov	DWORD PTR ?KnockBrickSound@@3VCDxSoundBuffer@@A, edi
$LN60@ReleaseAll@2:
	pop	edi
; Line 334
	ret	0
?ReleaseAll@@YAXXZ ENDP					; ReleaseAll
_TEXT	ENDS
PUBLIC	?GameStop@@YAXXZ				; GameStop
; Function compile flags: /Ogtp
;	COMDAT ?GameStop@@YAXXZ
_TEXT	SEGMENT
?GameStop@@YAXXZ PROC					; GameStop, COMDAT
; Line 313
	mov	ecx, DWORD PTR ?pEngine@@3PAVCEngine@@A	; pEngine
	test	ecx, ecx
	je	SHORT $LN3@GameStop
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	push	1
	call	edx
$LN3@GameStop:
; Line 314
	mov	eax, DWORD PTR ?bufferBitmap@@3PAUHBITMAP__@@A ; bufferBitmap
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
; Line 316
	mov	ecx, DWORD PTR ?bufferDC@@3PAUHDC__@@A	; bufferDC
	push	ecx
	mov	DWORD PTR ?bufferBitmap@@3PAUHBITMAP__@@A, 0 ; bufferBitmap
	call	DWORD PTR __imp__DeleteDC@4
; Line 317
	jmp	?ReleaseAll@@YAXXZ			; ReleaseAll
?GameStop@@YAXXZ ENDP					; GameStop
PUBLIC	__real@4000000000000000
PUBLIC	__$ArrayPad$
PUBLIC	?DrawBeforeLevelInfo@@YAXPAUHDC__@@@Z		; DrawBeforeLevelInfo
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DrawBeforeLevelInfo@@YAXPAUHDC__@@@Z
_TEXT	SEGMENT
_rect$ = -104						; size = 16
_BGRect$ = -88						; size = 16
_Buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
?DrawBeforeLevelInfo@@YAXPAUHDC__@@@Z PROC		; DrawBeforeLevelInfo, COMDAT
; _OffDC$ = ecx
; Line 412
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 417
	mov	eax, DWORD PTR ?WinSize@@3UtagSIZE@@A
	push	ebx
	push	esi
	push	edi
	add	eax, -10				; fffffff6H
	mov	ebx, 10					; 0000000aH
; Line 420
	push	0
	mov	esi, ecx
	mov	edi, ebx
	mov	DWORD PTR _rect$[ebp+8], eax
	call	DWORD PTR __imp__CreateSolidBrush@4
; Line 422
	xor	ecx, ecx
	mov	DWORD PTR _BGRect$[ebp], ecx
; Line 423
	mov	DWORD PTR _BGRect$[ebp+4], ecx
; Line 424
	mov	ecx, 800				; 00000320H
	mov	DWORD PTR _BGRect$[ebp+8], ecx
; Line 425
	mov	DWORD PTR _BGRect$[ebp+12], ecx
; Line 426
	push	eax
	lea	ecx, DWORD PTR _BGRect$[ebp]
	push	ecx
	push	esi
	call	DWORD PTR __imp__FillRect@12
; Line 429
	mov	ecx, DWORD PTR ?InPlayingTimeSpend@@3HA	; InPlayingTimeSpend
	test	ecx, ecx
	jne	SHORT $LN2@DrawBefore
; Line 430
	xor	eax, eax
; Line 431
	jmp	SHORT $LN5@DrawBefore
$LN2@DrawBefore:
; Line 432
	mov	edx, DWORD PTR ?dragDistance@@3HA	; dragDistance
	mov	eax, DWORD PTR ?coinCount@@3HA		; coinCount
	lea	eax, DWORD PTR [edx+eax*4+80]
	lea	eax, DWORD PTR [eax+eax*4]
	sub	eax, ecx
$LN5@DrawBefore:
; Line 435
	mov	ecx, DWORD PTR ?currentLevel@@3HA	; currentLevel
	push	ecx
	push	eax
	lea	edx, DWORD PTR _Buf$[ebp]
	push	OFFSET ??_C@_0CC@HOFDEANM@MARIO?5?3?5?$CF03d?5?5?5?5?5?5?5?5?5?5?5WORLD?5?3?5?$CF@
	push	edx
	mov	DWORD PTR ?TotalScores@@3HA, eax	; TotalScores
	call	_sprintf
; Line 436
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, 48					; 00000030H
	mov	DWORD PTR [eax+12], ecx
	push	19					; 00000013H
	mov	ecx, OFFSET ??_C@_04JBPPCJCH@?$LK?Z?L?e?$AA@
	lea	ebx, DWORD PTR _Buf$[ebp]
	call	?DrawWords@CGdiBmp@@SAXPAUHDC__@@PADKHPBDUtagRECT@@H@Z ; CGdiBmp::DrawWords
; Line 437
	fld	QWORD PTR __real@4000000000000000
	mov	edx, DWORD PTR ?mario_Info@@3PAVCGdiBmp@@A ; mario_Info
	fstp	QWORD PTR [esp+12]
	add	esp, 12					; 0000000cH
	push	12615872				; 00c080c0H
	push	0
	push	16					; 00000010H
	push	16					; 00000010H
	push	0
	push	0
	push	110					; 0000006eH
	push	160					; 000000a0H
	push	edx
	mov	eax, esi
	call	?DrawSingleFrame@CGdiBmp@@QAEXPAUHDC__@@HHHHHHNHK@Z ; CGdiBmp::DrawSingleFrame
; Line 443
	mov	eax, DWORD PTR ?LifeRemain@@3HA		; LifeRemain
	push	eax
	lea	ecx, DWORD PTR _Buf$[ebp]
	push	OFFSET ??_C@_04KOJLAJHO@X?5?$CFd?$AA@
	mov	edi, 190				; 000000beH
	push	ecx
	lea	ebx, DWORD PTR [edi-80]
	call	_sprintf
; Line 444
	push	ecx
	mov	eax, esp
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebx
	mov	ecx, 250				; 000000faH
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, 150				; 00000096H
	mov	DWORD PTR [eax+12], ecx
	push	30					; 0000001eH
	mov	ecx, OFFSET ??_C@_04JBPPCJCH@?$LK?Z?L?e?$AA@
	lea	ebx, DWORD PTR _Buf$[ebp]
	call	?DrawWords@CGdiBmp@@SAXPAUHDC__@@PADKHPBDUtagRECT@@H@Z ; CGdiBmp::DrawWords
; Line 445
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawBeforeLevelInfo@@YAXPAUHDC__@@@Z ENDP		; DrawBeforeLevelInfo
_TEXT	ENDS
PUBLIC	__real@3ffe9f3c0569cc4c
PUBLIC	?DrawWelcome@@YAXPAUHDC__@@@Z			; DrawWelcome
;	COMDAT __real@3ffe9f3c0569cc4c
CONST	SEGMENT
__real@3ffe9f3c0569cc4c DQ 03ffe9f3c0569cc4cr	; 1.91388
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DrawWelcome@@YAXPAUHDC__@@@Z
_TEXT	SEGMENT
_rect$ = -16						; size = 16
?DrawWelcome@@YAXPAUHDC__@@@Z PROC			; DrawWelcome, COMDAT
; _OffDC$ = eax
; Line 401
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 408
	fld	QWORD PTR __real@3ffe9f3c0569cc4c
	push	ebx
	push	esi
	mov	ecx, DWORD PTR ?WelcomeScreenLogo@@3PAVCGdiBmp@@A ; WelcomeScreenLogo
	push	edi
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	0
	push	0
	push	185					; 000000b9H
	push	400					; 00000190H
	push	0
	mov	esi, eax
	mov	eax, DWORD PTR ?WinSize@@3UtagSIZE@@A
	push	2
	push	0
	add	eax, -10				; fffffff6H
	push	-1
	mov	DWORD PTR _rect$[ebp+8], eax
	push	ecx
	mov	eax, esi
	mov	edi, 10					; 0000000aH
	mov	ebx, 380				; 0000017cH
	call	?DrawSingleFrame@CGdiBmp@@QAEXPAUHDC__@@HHHHHHNHK@Z ; CGdiBmp::DrawSingleFrame
; Line 409
	mov	edx, DWORD PTR _rect$[ebp+8]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebx
	mov	ecx, 30					; 0000001eH
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	push	20					; 00000014H
	mov	ecx, OFFSET ??_C@_04JBPPCJCH@?$LK?Z?L?e?$AA@
	mov	ebx, OFFSET ??_C@_0BL@MDCPIFFP@Begin?$FLEnter?$FN?5?5?5?5?5?5About?$FLA?$FN?$AA@
	call	?DrawWords@CGdiBmp@@SAXPAUHDC__@@PADKHPBDUtagRECT@@H@Z ; CGdiBmp::DrawWords
	add	esp, 20					; 00000014H
; Line 410
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawWelcome@@YAXPAUHDC__@@@Z ENDP			; DrawWelcome
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?LoadCoinSprite@@YAXXZ				; LoadCoinSprite
;	COMDAT __real@3ff0000000000000
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cgdibmp.h
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadCoinSprite@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadCoinSprite@@YAXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadCoinSprite@@YAXXZ$1
__ehfuncinfo$?LoadCoinSprite@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadCoinSprite@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadCoinSprite@@YAXXZ
_TEXT	SEGMENT
$T137081 = -68						; size = 4
$T137077 = -68						; size = 4
__$EHRec$ = -12						; size = 12
?LoadCoinSprite@@YAXXZ PROC				; LoadCoinSprite, COMDAT
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\supermario.cpp
; Line 337
	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	push	-1
	push	__ehhandler$?LoadCoinSprite@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+132]
	mov	DWORD PTR fs:0, eax
; Line 338
	cmp	DWORD PTR ?coin@@3PAVCSprite@@A, 0	; coin
	jne	$LN4@LoadCoinSp
; Line 342
	cmp	DWORD PTR ?currentLevel@@3HA, 2		; currentLevel
; Line 343
	push	104					; 00000068H
	jne	SHORT $LN2@LoadCoinSp
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T137077[esp+132], eax
	mov	DWORD PTR __$EHRec$[esp+140], 0
	test	eax, eax
	je	SHORT $LN6@LoadCoinSp
	push	OFFSET ??_C@_0BF@KKCENHLJ@?4?2res?2coin_black?4bmp?$AA@
	mov	edi, eax
	call	??0CSprite@@QAE@PAD@Z			; CSprite::CSprite
; Line 344
	xor	esi, esi
; Line 346
	jmp	SHORT $LN17@LoadCoinSp
$LN6@LoadCoinSp:
; Line 343
	xor	eax, eax
; Line 344
	xor	esi, esi
; Line 346
	jmp	SHORT $LN17@LoadCoinSp
$LN2@LoadCoinSp:
; Line 347
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T137081[esp+132], eax
	mov	DWORD PTR __$EHRec$[esp+140], 1
	test	eax, eax
	je	SHORT $LN8@LoadCoinSp
	push	OFFSET ??_C@_0BE@IOLHNHAP@?4?2res?2coin_blue?4bmp?$AA@
	mov	edi, eax
	call	??0CSprite@@QAE@PAD@Z			; CSprite::CSprite
	jmp	SHORT $LN9@LoadCoinSp
$LN8@LoadCoinSp:
	xor	eax, eax
$LN9@LoadCoinSp:
; Line 348
	mov	esi, 12582912				; 00c00000H
$LN17@LoadCoinSp:
; Line 347
	mov	DWORD PTR __$EHRec$[esp+140], -1
	mov	ecx, eax
; Line 357
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?coin@@3PAVCSprite@@A, ecx	; coin
	call	edx
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	call	edx
; Line 360
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edi, DWORD PTR [ecx]
	mov	eax, 16					; 00000010H
	mov	edx, eax
	push	edx
	push	eax
	mov	eax, DWORD PTR [edi+32]
	call	eax
; Line 361
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+76]
	push	0
	call	eax
; Line 362
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+108]
	push	5
	call	eax
; Line 363
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	push	3
	call	eax
; Line 364
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	push	3
	call	eax
; Line 365
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	push	esi
	call	eax
; Line 366
	fld1
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	eax
; Line 367
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+92]
	push	1
	call	eax
; Line 368
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+116]
	push	0
	call	eax
; Line 369
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+100]
	push	0
	call	eax
$LN4@LoadCoinSp:
; Line 370
	mov	ecx, DWORD PTR __$EHRec$[esp+132]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadCoinSprite@@YAXXZ$0:
	mov	eax, DWORD PTR $T137077[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?LoadCoinSprite@@YAXXZ$1:
	mov	eax, DWORD PTR $T137081[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LoadCoinSprite@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-116]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadCoinSprite@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadCoinSprite@@YAXXZ ENDP				; LoadCoinSprite
PUBLIC	?UpdatePlayerPosition@@YAXXZ			; UpdatePlayerPosition
; Function compile flags: /Ogtp
;	COMDAT ?UpdatePlayerPosition@@YAXXZ
_TEXT	SEGMENT
$T137106 = -16						; size = 8
tv141 = -8						; size = 8
?UpdatePlayerPosition@@YAXXZ PROC			; UpdatePlayerPosition, COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 169
	cmp	BYTE PTR ?inLevelBegin@@3_NA, 0		; inLevelBegin
	push	ebx
	push	esi
	push	edi
	jne	$LN1@UpdatePlay
	cmp	BYTE PTR ?inPlaying@@3_NA, 0		; inPlaying
	je	$LN1@UpdatePlay
; Line 171
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+28]
	lea	edx, DWORD PTR $T137106[ebp]
	push	edx
	call	eax
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+40]
	fstp	QWORD PTR tv141[ebp]
	call	eax
	fmul	QWORD PTR tv141[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
; Line 175
	mov	edx, DWORD PTR ?WinSize@@3UtagSIZE@@A
	lea	ecx, DWORD PTR [eax+eax]
; Line 178
	mov	eax, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	ebx, DWORD PTR [eax]
	push	1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	sub	edx, ecx
	mov	ecx, DWORD PTR ?WinSize@@3UtagSIZE@@A+4
	xor	esi, esi
	mov	DWORD PTR [eax], esi
	xor	edi, edi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ebx+180]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	call	edx
; Line 179
	mov	ecx, DWORD PTR ?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A ; main_sprite_fj3rfr3289jf
	fld	DWORD PTR [ecx+4416]
	fcomp	QWORD PTR __real@4069000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN12@UpdatePlay
	xor	eax, eax
	mov	BYTE PTR [ecx+4436], 1
	cmp	DWORD PTR [ecx+4400], eax
	je	SHORT $LN9@UpdatePlay
	mov	DWORD PTR [ecx+4400], eax
	mov	DWORD PTR [ecx+360], eax
$LN9@UpdatePlay:
	mov	DWORD PTR ?oldTimeCount@@3JA, eax	; oldTimeCount
$LN12@UpdatePlay:
; Line 180
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+152]
	push	1
	call	edx
$LN1@UpdatePlay:
; Line 182
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdatePlayerPosition@@YAXXZ ENDP			; UpdatePlayerPosition
_TEXT	ENDS
PUBLIC	?GameInitialize@@YA_NPAUHINSTANCE__@@@Z		; GameInitialize
;	COMDAT xdata$x
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cengine.h
xdata$x	SEGMENT
__unwindtable$?GameInitialize@@YA_NPAUHINSTANCE__@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GameInitialize@@YA_NPAUHINSTANCE__@@@Z$0
__ehfuncinfo$?GameInitialize@@YA_NPAUHINSTANCE__@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GameInitialize@@YA_NPAUHINSTANCE__@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GameInitialize@@YA_NPAUHINSTANCE__@@@Z
_TEXT	SEGMENT
$T137126 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hInstance$ = 8						; size = 4
?GameInitialize@@YA_NPAUHINSTANCE__@@@Z PROC		; GameInitialize, COMDAT
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\supermario.cpp
; Line 10
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GameInitialize@@YA_NPAUHINSTANCE__@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 16
	push	212					; 000000d4H
	mov	DWORD PTR ?WinSize@@3UtagSIZE@@A, 400	; 00000190H
	mov	DWORD PTR ?WinSize@@3UtagSIZE@@A+4, 250	; 000000faH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T137126[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN4@GameInitia
	mov	ecx, DWORD PTR ?WinSize@@3UtagSIZE@@A+4
	mov	edx, DWORD PTR ?WinSize@@3UtagSIZE@@A
	push	ecx
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	edx
	push	ecx
	push	eax
	call	??0CEngine@@QAE@PAUHINSTANCE__@@PAD1HH@Z ; CEngine::CEngine
	jmp	SHORT $LN5@GameInitia
$LN4@GameInitia:
	xor	eax, eax
$LN5@GameInitia:
	mov	DWORD PTR ?pEngine@@3PAVCEngine@@A, eax	; pEngine
; Line 18
	mov	DWORD PTR [eax+204], 66			; 00000042H
; Line 21
	mov	al, 1
; Line 22
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GameInitialize@@YA_NPAUHINSTANCE__@@@Z$0:
	mov	eax, DWORD PTR $T137126[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?GameInitialize@@YA_NPAUHINSTANCE__@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GameInitialize@@YA_NPAUHINSTANCE__@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GameInitialize@@YA_NPAUHINSTANCE__@@@Z ENDP		; GameInitialize
PUBLIC	?GamePaint@@YAXPAUHDC__@@@Z			; GamePaint
; Function compile flags: /Ogtp
;	COMDAT ?GamePaint@@YAXPAUHDC__@@@Z
_TEXT	SEGMENT
_rect$138406 = -16					; size = 16
?GamePaint@@YAXPAUHDC__@@@Z PROC			; GamePaint, COMDAT
; _OffDC$ = eax
; Line 128
	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	sub	esp, 52					; 00000034H
; Line 129
	cmp	BYTE PTR ?inWelcome@@3_NA, 0		; inWelcome
	push	ebx
	push	esi
	push	edi
	mov	edi, eax
	je	SHORT $LN7@GamePaint
; Line 130
	fld	QWORD PTR __real@3ffe9f3c0569cc4c
	mov	eax, DWORD PTR ?WinSize@@3UtagSIZE@@A
	mov	ecx, DWORD PTR ?WelcomeScreenLogo@@3PAVCGdiBmp@@A ; WelcomeScreenLogo
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	0
	push	0
	push	185					; 000000b9H
	push	400					; 00000190H
	push	0
	push	2
	push	0
	add	eax, -10				; fffffff6H
	push	-1
	mov	DWORD PTR _rect$138406[esp+112], eax
	push	ecx
	mov	eax, edi
	mov	esi, 10					; 0000000aH
	mov	ebx, 380				; 0000017cH
	call	?DrawSingleFrame@CGdiBmp@@QAEXPAUHDC__@@HHHHHHNHK@Z ; CGdiBmp::DrawSingleFrame
	mov	edx, DWORD PTR _rect$138406[esp+72]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], ebx
	mov	ecx, 30					; 0000001eH
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	push	20					; 00000014H
	mov	ecx, OFFSET ??_C@_04JBPPCJCH@?$LK?Z?L?e?$AA@
	mov	ebx, OFFSET ??_C@_0BL@MDCPIFFP@Begin?$FLEnter?$FN?5?5?5?5?5?5About?$FLA?$FN?$AA@
	mov	esi, edi
	call	?DrawWords@CGdiBmp@@SAXPAUHDC__@@PADKHPBDUtagRECT@@H@Z ; CGdiBmp::DrawWords
	add	esp, 20					; 00000014H
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@GamePaint:
; Line 134
	cmp	BYTE PTR ?inLevelBegin@@3_NA, 0		; inLevelBegin
	je	$LN6@GamePaint
; Line 135
	mov	ecx, edi
	call	?DrawBeforeLevelInfo@@YAXPAUHDC__@@@Z	; DrawBeforeLevelInfo
; Line 136
	fld	DWORD PTR __real@42200000
	mov	eax, DWORD PTR ?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A ; main_sprite_fj3rfr3289jf
; Line 137
	mov	esi, DWORD PTR __imp__GetTickCount@0
	fst	DWORD PTR [eax+4412]
	fstp	DWORD PTR [eax+4416]
	xor	edi, edi
	fldz
	mov	BYTE PTR [eax+4436], 0
	fst	DWORD PTR [eax+4428]
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [eax+4432]
	fst	DWORD PTR [eax+4420]
	fstp	DWORD PTR [eax+4424]
	cmp	DWORD PTR ?oldTimeCount@@3JA, edi	; oldTimeCount
	jne	SHORT $LN5@GamePaint
; Line 138
	call	esi
	mov	DWORD PTR ?oldTimeCount@@3JA, eax	; oldTimeCount
$LN5@GamePaint:
; Line 139
	call	esi
	mov	DWORD PTR ?newTimeCount@@3JA, eax	; newTimeCount
; Line 140
	sub	eax, DWORD PTR ?oldTimeCount@@3JA	; oldTimeCount
	cmp	eax, 3000				; 00000bb8H
	jl	$LN1@GamePaint
; Line 141
	mov	BYTE PTR ?inLevelBegin@@3_NA, 0		; inLevelBegin
; Line 142
	mov	BYTE PTR ?inPlaying@@3_NA, 1		; inPlaying
; Line 143
	mov	DWORD PTR ?oldTimeCount@@3JA, edi	; oldTimeCount
	mov	DWORD PTR ?newTimeCount@@3JA, edi	; newTimeCount
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@GamePaint:
; Line 148
	cmp	BYTE PTR ?inPlaying@@3_NA, 0		; inPlaying
	je	$LN22@GamePaint
; Line 150
	mov	eax, DWORD PTR ?BGSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	push	1
	push	0
	push	0
	push	eax
	call	edx
; Line 151
	mov	esi, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	eax, DWORD PTR [esi+72]
	push	eax
	push	edi
	call	?DrawMap@CMap@@QAEXPAUHDC__@@HH@Z	; CMap::DrawMap
; Line 152
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+156]
	push	edi
	call	eax
; Line 153
	cmp	DWORD PTR ?oldTimeCount@@3JA, 0		; oldTimeCount
	mov	esi, DWORD PTR __imp__GetTickCount@0
	jne	SHORT $LN2@GamePaint
; Line 154
	call	esi
	mov	DWORD PTR ?oldTimeCount@@3JA, eax	; oldTimeCount
$LN2@GamePaint:
; Line 155
	call	esi
; Line 156
	mov	ecx, edi
	mov	DWORD PTR ?newTimeCount@@3JA, eax	; newTimeCount
	call	?DrawInPlayingScore@@YAXPAUHDC__@@@Z	; DrawInPlayingScore
; Line 157
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+156]
	push	edi
	call	eax
; Line 158
	mov	ecx, DWORD PTR ?coin@@3PAVCSprite@@A	; coin
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+152]
	push	1
	call	eax
; Line 161
	cmp	BYTE PTR ?inLevelBegin@@3_NA, 0		; inLevelBegin
	jne	SHORT $LN1@GamePaint
	cmp	BYTE PTR ?inPlaying@@3_NA, 0		; inPlaying
	jne	SHORT $LN1@GamePaint
$LN22@GamePaint:
; Line 162
	mov	ecx, edi
	call	?DrawGameTotallyEnd@@YAXPAUHDC__@@@Z	; DrawGameTotallyEnd
$LN1@GamePaint:
; Line 165
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GamePaint@@YAXPAUHDC__@@@Z ENDP			; GamePaint
_TEXT	ENDS
PUBLIC	?CreatePlayer@@YAXUSPRITEINFO@@@Z		; CreatePlayer
;	COMDAT xdata$x
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\cgdibmp.h
xdata$x	SEGMENT
__unwindtable$?CreatePlayer@@YAXUSPRITEINFO@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatePlayer@@YAXUSPRITEINFO@@@Z$0
__ehfuncinfo$?CreatePlayer@@YAXUSPRITEINFO@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreatePlayer@@YAXUSPRITEINFO@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?CreatePlayer@@YAXUSPRITEINFO@@@Z
_TEXT	SEGMENT
$T138427 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_spInfo$ = 8						; size = 64
?CreatePlayer@@YAXUSPRITEINFO@@@Z PROC			; CreatePlayer, COMDAT
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\supermario.cpp
; Line 98
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreatePlayer@@YAXUSPRITEINFO@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 100
	push	4440					; 00001158H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T138427[ebp], eax
	xor	ecx, ecx
	mov	DWORD PTR __$EHRec$[ebp+8], ecx
	cmp	eax, ecx
	je	SHORT $LN3@CreatePlay
	mov	ecx, DWORD PTR _spInfo$[ebp]
	mov	edi, eax
	call	??0MaiMarioSprite@@QAE@PAD@Z		; MaiMarioSprite::MaiMarioSprite
	mov	ecx, eax
$LN3@CreatePlay:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 101
	mov	eax, DWORD PTR _spInfo$[ebp+4]
	cdq
	idiv	DWORD PTR _spInfo$[ebp+8]
	mov	DWORD PTR ?Player@@3PAVCSprite@@A, ecx	; Player
	mov	esi, eax
; Line 104
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	call	edx
; Line 106
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	call	edx
; Line 108
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	mov	eax, DWORD PTR [eax+8]
	cdq
	idiv	DWORD PTR _spInfo$[ebp+8]
; Line 110
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	ebx, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	mov	eax, DWORD PTR [eax+12]
	cdq
	idiv	esi
; Line 114
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	xor	esi, esi
	xor	edi, edi
	push	eax
	mov	eax, DWORD PTR [edx+32]
	push	ebx
	call	eax
; Line 115
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+68]
	push	edi
	push	esi
	call	eax
; Line 116
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _spInfo$[ebp+40]
	mov	edx, DWORD PTR [edx+76]
	push	eax
	call	edx
; Line 117
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _spInfo$[ebp+44]
	mov	eax, DWORD PTR [eax+108]
	push	edx
	call	eax
; Line 118
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _spInfo$[ebp+48]
	mov	edx, DWORD PTR [edx+124]
	push	eax
	call	edx
; Line 119
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _spInfo$[ebp+4]
	mov	eax, DWORD PTR [eax+16]
	push	edx
	call	eax
; Line 120
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _spInfo$[ebp+8]
	mov	edx, DWORD PTR [edx+24]
	push	eax
	call	edx
; Line 121
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _spInfo$[ebp+56]
	mov	eax, DWORD PTR [eax+8]
	push	edx
	call	eax
; Line 122
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	push	edi
	mov	eax, DWORD PTR [edx+92]
	call	eax
; Line 123
	fld	QWORD PTR _spInfo$[ebp+16]
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	eax
; Line 124
	mov	ecx, DWORD PTR ?Player@@3PAVCSprite@@A	; Player
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+60]
	push	edi
	push	esi
	call	eax
; Line 125
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreatePlayer@@YAXUSPRITEINFO@@@Z$0:
	mov	eax, DWORD PTR $T138427[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreatePlayer@@YAXUSPRITEINFO@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreatePlayer@@YAXUSPRITEINFO@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreatePlayer@@YAXUSPRITEINFO@@@Z ENDP			; CreatePlayer
PUBLIC	?checkMapAndSound@@YAXXZ			; checkMapAndSound
; Function compile flags: /Ogtp
;	COMDAT ?checkMapAndSound@@YAXXZ
_TEXT	SEGMENT
?checkMapAndSound@@YAXXZ PROC				; checkMapAndSound, COMDAT
; Line 185
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	push	edi
; Line 186
	mov	edi, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	eax, DWORD PTR [edi+16]
	test	eax, eax
	jne	SHORT $LN9@checkMapAn
; Line 187
	push	OFFSET ??_C@_0BF@LKPMFGFA@?4?2res?2map?2level1?4dat?$AA@
	call	?LoadTxtMap@CMap@@QAEXPBD@Z		; CMap::LoadTxtMap
; Line 189
	mov	eax, DWORD PTR ?map@@3PAVCMap@@A	; map
; Line 190
	push	OFFSET ??_C@_0BJ@LHOFLGHE@?4?2res?2sound?2BGground?4wav?$AA@
	mov	edi, OFFSET ?BGSound@@3VCDxSoundBuffer@@A ; BGSound
	mov	DWORD PTR ?currentLevel@@3HA, 1		; currentLevel
	mov	DWORD PTR [eax+16], 1
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 191
	push	OFFSET ??_C@_0BM@HOHJKIFP@?4?2res?2sound?2EnterCastle?4wav?$AA@
	mov	edi, OFFSET ?LevelEndSound@@3VCDxSoundBuffer@@A ; LevelEndSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 219
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@checkMapAn:
; Line 193
	cmp	DWORD PTR ?currentLevel@@3HA, eax	; currentLevel
	je	SHORT $LN18@checkMapAn
; Line 194
	call	?releaseMapMatrix@CMap@@QAEXXZ		; CMap::releaseMapMatrix
; Line 195
	mov	eax, DWORD PTR ?currentLevel@@3HA	; currentLevel
	dec	eax
	je	SHORT $LN4@checkMapAn
	dec	eax
	je	SHORT $LN3@checkMapAn
	dec	eax
; Line 215
	jne	SHORT $LN4@checkMapAn
; Line 207
	push	OFFSET ??_C@_0BF@PHDEPHFL@?4?2res?2map?2level3?4dat?$AA@
; Line 210
	jmp	SHORT $LN20@checkMapAn
$LN3@checkMapAn:
; Line 202
	push	OFFSET ??_C@_0BF@DMGICEPO@?4?2res?2map?2level2?4dat?$AA@
	call	?LoadTxtMap@CMap@@QAEXPBD@Z		; CMap::LoadTxtMap
; Line 203
	push	OFFSET ??_C@_0BO@JJGGKPHG@?4?2res?2sound?2BGUnderGround?4wav?$AA@
	mov	edi, OFFSET ?BGSound@@3VCDxSoundBuffer@@A ; BGSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 204
	push	OFFSET ??_C@_0BK@LKILOFCG@?4?2res?2sound?2EnterTube?4wav?$AA@
; Line 205
	jmp	SHORT $LN21@checkMapAn
$LN4@checkMapAn:
; Line 197
	push	OFFSET ??_C@_0BF@LKPMFGFA@?4?2res?2map?2level1?4dat?$AA@
$LN20@checkMapAn:
	call	?LoadTxtMap@CMap@@QAEXPBD@Z		; CMap::LoadTxtMap
; Line 198
	push	OFFSET ??_C@_0BJ@LHOFLGHE@?4?2res?2sound?2BGground?4wav?$AA@
	mov	edi, OFFSET ?BGSound@@3VCDxSoundBuffer@@A ; BGSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 199
	push	OFFSET ??_C@_0BM@HOHJKIFP@?4?2res?2sound?2EnterCastle?4wav?$AA@
$LN21@checkMapAn:
	mov	edi, OFFSET ?LevelEndSound@@3VCDxSoundBuffer@@A ; LevelEndSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 217
	mov	ecx, DWORD PTR ?map@@3PAVCMap@@A	; map
	mov	edx, DWORD PTR ?currentLevel@@3HA	; currentLevel
	mov	DWORD PTR [ecx+16], edx
$LN18@checkMapAn:
; Line 219
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
?checkMapAndSound@@YAXXZ ENDP				; checkMapAndSound
_TEXT	ENDS
PUBLIC	?LoadGame@@YAXXZ				; LoadGame
;	COMDAT xdata$x
; File d:\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__unwindtable$?LoadGame@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadGame@@YAXXZ$3
__ehfuncinfo$?LoadGame@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadGame@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?LoadGame@@YAXXZ
_TEXT	SEGMENT
$T150135 = -84						; size = 4
_playerinfo$ = -80					; size = 64
__$EHRec$ = -12						; size = 12
?LoadGame@@YAXXZ PROC					; LoadGame, COMDAT
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\supermario.cpp
; Line 41
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadGame@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 43
	xor	ebx, ebx
	mov	edi, 1
; Line 58
	push	16					; 00000010H
	mov	DWORD PTR ?currentLevel@@3HA, edi	; currentLevel
	mov	DWORD PTR ?inPlayScore@@3HA, ebx	; inPlayScore
	mov	DWORD PTR ?coin@@3PAVCSprite@@A, ebx	; coin
	mov	DWORD PTR ?LifeRemain@@3HA, 5		; LifeRemain
	mov	DWORD PTR ?TotalScores@@3HA, ebx	; TotalScores
	mov	DWORD PTR ?InPlayingTimeSpend@@3HA, ebx	; InPlayingTimeSpend
	mov	DWORD PTR ?dragDistance@@3HA, ebx	; dragDistance
	mov	BYTE PTR ?inWelcome@@3_NA, 1		; inWelcome
	mov	BYTE PTR ?inLevelBegin@@3_NA, bl	; inLevelBegin
	mov	BYTE PTR ?inPlaying@@3_NA, bl		; inPlaying
	mov	BYTE PTR ?isDelayCollision@@3_NA, 1	; isDelayCollision
	mov	BYTE PTR ?UpGgradeLevel@@3_NA, bl	; UpGgradeLevel
	mov	BYTE PTR ?isDragingFlag@@3_NA, bl	; isDragingFlag
	mov	BYTE PTR ?isGettingCoin@@3_NA, bl	; isGettingCoin
	mov	DWORD PTR ?oldTimeCount@@3JA, ebx	; oldTimeCount
	mov	DWORD PTR ?newTimeCount@@3JA, ebx	; newTimeCount
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN4@LoadGame
	push	OFFSET ??_C@_0BE@EPPKIMCK@?4?2res?2LogoMario?4bmp?$AA@
	mov	esi, eax
	call	??0CGdiBmp@@QAE@PAD@Z			; CGdiBmp::CGdiBmp
	jmp	SHORT $LN5@LoadGame
$LN4@LoadGame:
	xor	eax, eax
$LN5@LoadGame:
; Line 59
	push	16					; 00000010H
	mov	DWORD PTR ?WelcomeScreenLogo@@3PAVCGdiBmp@@A, eax ; WelcomeScreenLogo
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN6@LoadGame
	push	OFFSET ??_C@_0BF@MGBCJANP@?4?2res?2mario_Info?4bmp?$AA@
	mov	esi, eax
	call	??0CGdiBmp@@QAE@PAD@Z			; CGdiBmp::CGdiBmp
	jmp	SHORT $LN7@LoadGame
$LN6@LoadGame:
	xor	eax, eax
$LN7@LoadGame:
; Line 60
	push	16					; 00000010H
	mov	DWORD PTR ?mario_Info@@3PAVCGdiBmp@@A, eax ; mario_Info
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN8@LoadGame
	push	OFFSET ??_C@_0BA@DNEODNKA@?4?2res?2about?4bmp?$AA@
	mov	esi, eax
	call	??0CGdiBmp@@QAE@PAD@Z			; CGdiBmp::CGdiBmp
	jmp	SHORT $LN9@LoadGame
$LN8@LoadGame:
	xor	eax, eax
$LN9@LoadGame:
; Line 66
	mov	ecx, DWORD PTR ?WinSize@@3UtagSIZE@@A+4
; Line 75
	fld1
	mov	DWORD PTR ?about@@3PAVCGdiBmp@@A, eax	; about
	fstp	QWORD PTR _playerinfo$[ebp+16]
	mov	eax, DWORD PTR ?WinSize@@3UtagSIZE@@A
	mov	DWORD PTR ?PlayerBoundary@@3UtagRECT@@A+8, eax
	mov	DWORD PTR ?PlayerBoundary@@3UtagRECT@@A+12, ecx
	mov	DWORD PTR ?ScreenBoundry@@3UtagRECT@@A+8, eax
	mov	DWORD PTR ?ScreenBoundry@@3UtagRECT@@A+12, ecx
	mov	eax, 8
; Line 78
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _playerinfo$[ebp+24], edi
	mov	DWORD PTR _playerinfo$[ebp+36], edi
	mov	DWORD PTR _playerinfo$[ebp+4], eax
	mov	DWORD PTR _playerinfo$[ebp+8], eax
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _playerinfo$[ebp]
	mov	edi, esp
	mov	DWORD PTR _playerinfo$[ebp], OFFSET ??_C@_0BB@BKFLLPMI@?4?2res?2mario_?4bmp?$AA@
	mov	DWORD PTR _playerinfo$[ebp+28], ebx
	mov	DWORD PTR _playerinfo$[ebp+32], ebx
	mov	DWORD PTR _playerinfo$[ebp+40], ebx
	mov	DWORD PTR _playerinfo$[ebp+44], 5
	mov	DWORD PTR _playerinfo$[ebp+48], ebx
	mov	WORD PTR _playerinfo$[ebp+52], 257	; 00000101H
	mov	DWORD PTR _playerinfo$[ebp+56], 12615872 ; 00c080c0H
	mov	DWORD PTR _playerinfo$[ebp+60], ebx
	mov	DWORD PTR ?PlayerBoundary@@3UtagRECT@@A, ebx
	mov	DWORD PTR ?PlayerBoundary@@3UtagRECT@@A+4, ebx
	mov	DWORD PTR ?ScreenBoundry@@3UtagRECT@@A, ebx
	mov	DWORD PTR ?ScreenBoundry@@3UtagRECT@@A+4, ebx
	rep movsd
	call	?CreatePlayer@@YAXUSPRITEINFO@@@Z	; CreatePlayer
	add	esp, 64					; 00000040H
; Line 80
	call	?LoadCoinSprite@@YAXXZ			; LoadCoinSprite
; Line 83
	mov	eax, DWORD PTR ?pEngine@@3PAVCEngine@@A	; pEngine
	mov	esi, DWORD PTR [eax+208]
	push	ebx
	push	OFFSET ?ds@@3VCDxSound@@A		; ds
	push	ebx
	call	DWORD PTR __imp__DirectSoundCreate@12
	cmp	eax, ebx
	jl	$LN2@LoadGame
	mov	eax, DWORD PTR ?ds@@3VCDxSound@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	2
	push	esi
	push	eax
	call	edx
	cmp	eax, ebx
	jl	$LN2@LoadGame
	mov	ecx, OFFSET ?ds@@3VCDxSound@@A+4
	call	?CreateMainBuffer@CDxSoundBuffer@@QAE_NAAVCDxSound@@H@Z ; CDxSoundBuffer::CreateMainBuffer
	cmp	al, bl
	je	$LN2@LoadGame
; Line 84
	push	OFFSET ??_C@_0BF@LFDJJNLG@?4?2res?2sound?2Jump?4wav?$AA@
	mov	edi, OFFSET ?JumpSound@@3VCDxSoundBuffer@@A ; JumpSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 85
	push	OFFSET ??_C@_0BF@FOKHFNPG@?4?2res?2sound?2Dead?4wav?$AA@
	mov	edi, OFFSET ?DeadSound@@3VCDxSoundBuffer@@A ; DeadSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 86
	push	OFFSET ??_C@_0BP@GHFOEPGA@?4?2res?2sound?2GameTotallyEnd?4wav?$AA@
	mov	edi, OFFSET ?GameTotallyEndSound@@3VCDxSoundBuffer@@A ; GameTotallyEndSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 87
	push	OFFSET ??_C@_0BJ@KBONIJFG@?4?2res?2sound?2GameOver?4wav?$AA@
	mov	edi, OFFSET ?GameOverSound@@3VCDxSoundBuffer@@A ; GameOverSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 88
	push	OFFSET ??_C@_0BN@KJEKLBFP@?4?2res?2sound?2DragFlagPole?4wav?$AA@
	mov	edi, OFFSET ?DragFlagPloeSound@@3VCDxSoundBuffer@@A ; DragFlagPloeSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 89
	push	OFFSET ??_C@_0BM@EPCNOPI@?4?2res?2sound?2StepOnEnemy?4wav?$AA@
	mov	edi, OFFSET ?StepOnEnemySound@@3VCDxSoundBuffer@@A ; StepOnEnemySound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 90
	push	OFFSET ??_C@_0BL@FJAPLABD@?4?2res?2sound?2KnockBrick?4wav?$AA@
	mov	edi, OFFSET ?KnockBrickSound@@3VCDxSoundBuffer@@A ; KnockBrickSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 91
	push	OFFSET ??_C@_0BJ@FAOEJPDG@?4?2res?2sound?2GoldCoin?4wav?$AA@
	mov	edi, OFFSET ?GoldCoinSound@@3VCDxSoundBuffer@@A ; GoldCoinSound
	call	?LoadWave@CDxSoundBuffer@@QAE_NAAVCDxSound@@PBD@Z ; CDxSoundBuffer::LoadWave
; Line 93
	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN10@LoadGame
	mov	DWORD PTR [eax], OFFSET ??_7CMap@@6B@
	mov	DWORD PTR [eax+44], 15			; 0000000fH
	mov	DWORD PTR [eax+40], ebx
	mov	BYTE PTR [eax+24], bl
	mov	DWORD PTR [eax+72], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [eax+76], bl
	jmp	SHORT $LN11@LoadGame
$LN10@LoadGame:
	xor	eax, eax
$LN11@LoadGame:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR ?map@@3PAVCMap@@A, eax	; map
; Line 94
	call	?checkMapAndSound@@YAXXZ		; checkMapAndSound
$LN2@LoadGame:
; Line 95
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadGame@@YAXXZ$3:
	mov	eax, DWORD PTR $T150135[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LoadGame@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadGame@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadGame@@YAXXZ ENDP					; LoadGame
PUBLIC	?GameBegin@@YAXPAUHWND__@@@Z			; GameBegin
; Function compile flags: /Ogtp
;	COMDAT ?GameBegin@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
?GameBegin@@YAXPAUHWND__@@@Z PROC			; GameBegin, COMDAT
; _hWindow$ = esi
; Line 25
	push	edi
; Line 27
	call	DWORD PTR __imp__GetTickCount@0
	push	eax
	call	_srand
; Line 31
	mov	edi, DWORD PTR __imp__GetDC@4
	add	esp, 4
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__CreateCompatibleDC@4
	mov	DWORD PTR ?bufferDC@@3PAUHDC__@@A, eax	; bufferDC
; Line 35
	mov	eax, DWORD PTR ?pEngine@@3PAVCEngine@@A	; pEngine
	mov	ecx, DWORD PTR [eax+152]
	mov	eax, DWORD PTR [eax+148]
	push	ecx
	push	eax
	push	esi
	call	edi
	push	eax
	call	DWORD PTR __imp__CreateCompatibleBitmap@12
; Line 36
	push	eax
	mov	DWORD PTR ?bufferBitmap@@3PAUHBITMAP__@@A, eax ; bufferBitmap
	mov	eax, DWORD PTR ?bufferDC@@3PAUHDC__@@A	; bufferDC
	push	eax
	call	DWORD PTR __imp__SelectObject@8
; Line 38
	pop	edi
; Line 37
	jmp	?LoadGame@@YAXXZ			; LoadGame
?GameBegin@@YAXPAUHWND__@@@Z ENDP			; GameBegin
_TEXT	ENDS
PUBLIC	?KeyControl@@YAX_NPAUHDC__@@@Z			; KeyControl
; Function compile flags: /Ogtp
;	COMDAT ?KeyControl@@YAX_NPAUHDC__@@@Z
_TEXT	SEGMENT
?KeyControl@@YAX_NPAUHDC__@@@Z PROC			; KeyControl, COMDAT
; Line 288
	push	ecx
; Line 290
	push	13					; 0000000dH
	call	DWORD PTR __imp__GetAsyncKeyState@4
	test	ax, ax
	jns	SHORT $LN2@KeyControl
; Line 291
	mov	al, BYTE PTR ?inLevelBegin@@3_NA	; inLevelBegin
	mov	cl, BYTE PTR ?inPlaying@@3_NA		; inPlaying
	xor	dl, dl
	cmp	al, dl
	jne	SHORT $LN6@KeyControl
	cmp	cl, dl
	jne	SHORT $LN6@KeyControl
	cmp	BYTE PTR ?inWelcome@@3_NA, dl		; inWelcome
	jne	SHORT $LN18@KeyControl
; Line 292
	call	?ReleaseAll@@YAXXZ			; ReleaseAll
; Line 293
	call	?LoadGame@@YAXXZ			; LoadGame
	pop	ecx
; Line 308
	ret	0
$LN6@KeyControl:
; Line 295
	cmp	BYTE PTR ?inWelcome@@3_NA, dl		; inWelcome
	je	SHORT $LN15@KeyControl
	cmp	al, dl
	jne	SHORT $LN2@KeyControl
	cmp	cl, dl
	jne	SHORT $LN2@KeyControl
$LN18@KeyControl:
; Line 296
	mov	BYTE PTR ?inWelcome@@3_NA, dl		; inWelcome
; Line 297
	mov	BYTE PTR ?inLevelBegin@@3_NA, 1		; inLevelBegin
	pop	ecx
; Line 308
	ret	0
$LN15@KeyControl:
; Line 299
	cmp	al, dl
	je	SHORT $LN2@KeyControl
	cmp	cl, dl
	jne	SHORT $LN2@KeyControl
; Line 300
	mov	BYTE PTR ?inLevelBegin@@3_NA, dl	; inLevelBegin
; Line 301
	mov	BYTE PTR ?inPlaying@@3_NA, 1		; inPlaying
$LN2@KeyControl:
	pop	ecx
; Line 308
	ret	0
?KeyControl@@YAX_NPAUHDC__@@@Z ENDP			; KeyControl
_TEXT	ENDS
PUBLIC	?GameRunning@@YAXXZ				; GameRunning
; Function compile flags: /Ogtp
;	COMDAT ?GameRunning@@YAXXZ
_TEXT	SEGMENT
?GameRunning@@YAXXZ PROC				; GameRunning, COMDAT
; Line 222
	push	ebx
	push	esi
; Line 223
	call	?checkMapAndSound@@YAXXZ		; checkMapAndSound
; Line 224
	call	?LoadCoinSprite@@YAXXZ			; LoadCoinSprite
; Line 225
	xor	ebx, ebx
	cmp	BYTE PTR ?inPlaying@@3_NA, bl		; inPlaying
	je	SHORT $LN10@GameRunnin
; Line 226
	call	?UpdatePlayerPosition@@YAXXZ		; UpdatePlayerPosition
$LN10@GameRunnin:
; Line 230
	mov	eax, DWORD PTR ?pEngine@@3PAVCEngine@@A	; pEngine
	mov	esi, DWORD PTR [eax+208]
	push	edi
; Line 231
	push	esi
	call	DWORD PTR __imp__GetDC@4
	mov	edi, eax
; Line 233
	mov	eax, DWORD PTR ?bufferDC@@3PAUHDC__@@A	; bufferDC
	call	?GamePaint@@YAXPAUHDC__@@@Z		; GamePaint
; Line 235
	mov	eax, DWORD PTR ?pEngine@@3PAVCEngine@@A	; pEngine
	mov	ecx, DWORD PTR ?bufferDC@@3PAUHDC__@@A	; bufferDC
	mov	edx, DWORD PTR [eax+152]
	mov	eax, DWORD PTR [eax+148]
	push	13369376				; 00cc0020H
	push	ebx
	push	ebx
	push	ecx
	push	edx
	push	eax
	push	ebx
	push	ebx
	push	edi
	call	DWORD PTR __imp__BitBlt@36
; Line 236
	push	edi
	push	esi
	call	DWORD PTR __imp__ReleaseDC@8
	pop	edi
; Line 238
	cmp	BYTE PTR ?inPlaying@@3_NA, bl		; inPlaying
	je	$LN1@GameRunnin
; Line 240
	mov	eax, DWORD PTR ?main_sprite_fj3rfr3289jf@@3PAVMaiMarioSprite@@A ; main_sprite_fj3rfr3289jf
	mov	esi, DWORD PTR __imp__Sleep@4
	cmp	BYTE PTR [eax+4436], bl
	je	SHORT $LN48@GameRunnin
; Line 241
	mov	BYTE PTR [eax+4436], bl
; Line 242
	mov	eax, DWORD PTR ?BGSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+72]
	push	eax
	call	edx
; Line 243
	mov	eax, DWORD PTR ?DeadSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	push	ebx
	push	ebx
	push	ebx
	push	eax
	call	edx
; Line 244
	mov	eax, DWORD PTR ?BGSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+52]
	push	ebx
	push	eax
	call	edx
; Line 245
	push	2000					; 000007d0H
	call	esi
; Line 248
	dec	DWORD PTR ?LifeRemain@@3HA		; LifeRemain
	mov	BYTE PTR ?inPlaying@@3_NA, bl		; inPlaying
	mov	BYTE PTR ?inLevelBegin@@3_NA, 1		; inLevelBegin
; Line 249
	jne	SHORT $LN48@GameRunnin
; Line 250
	mov	BYTE PTR ?inPlaying@@3_NA, bl		; inPlaying
; Line 251
	mov	BYTE PTR ?inLevelBegin@@3_NA, bl	; inLevelBegin
; Line 252
	mov	BYTE PTR ?inWelcome@@3_NA, bl		; inWelcome
$LN48@GameRunnin:
; Line 256
	cmp	BYTE PTR ?UpGgradeLevel@@3_NA, bl	; UpGgradeLevel
	je	$LN3@GameRunnin
; Line 258
	mov	eax, DWORD PTR ?BGSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+72]
	inc	DWORD PTR ?currentLevel@@3HA		; currentLevel
	push	eax
	call	edx
; Line 259
	mov	eax, DWORD PTR ?currentLevel@@3HA	; currentLevel
	cmp	eax, 4
	je	SHORT $LN36@GameRunnin
; Line 260
	mov	eax, DWORD PTR ?LevelEndSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	push	ebx
	push	ebx
	push	ebx
	push	eax
	call	edx
	mov	eax, DWORD PTR ?currentLevel@@3HA	; currentLevel
$LN36@GameRunnin:
; Line 261
	mov	BYTE PTR ?inPlaying@@3_NA, bl		; inPlaying
; Line 262
	mov	BYTE PTR ?inLevelBegin@@3_NA, 1		; inLevelBegin
; Line 263
	mov	BYTE PTR ?UpGgradeLevel@@3_NA, bl	; UpGgradeLevel
; Line 264
	mov	DWORD PTR ?oldTimeCount@@3JA, ebx	; oldTimeCount
; Line 265
	mov	DWORD PTR ?coin@@3PAVCSprite@@A, ebx	; coin
; Line 266
	mov	DWORD PTR ?coinCount@@3HA, ebx		; coinCount
; Line 267
	cmp	eax, 4
	jne	SHORT $LN4@GameRunnin
; Line 270
	mov	eax, DWORD PTR ?GameTotallyEndSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	push	ebx
	push	ebx
	push	ebx
	push	eax
	mov	BYTE PTR ?inPlaying@@3_NA, bl		; inPlaying
	mov	BYTE PTR ?inLevelBegin@@3_NA, bl	; inLevelBegin
	call	edx
; Line 272
	jmp	SHORT $LN3@GameRunnin
$LN4@GameRunnin:
; Line 273
	mov	eax, DWORD PTR ?LevelEndSoundTime@@3PAHA[eax*4]
	push	eax
	call	esi
$LN3@GameRunnin:
; Line 276
	cmp	BYTE PTR ?isDragingFlag@@3_NA, bl	; isDragingFlag
	je	SHORT $LN42@GameRunnin
; Line 277
	mov	eax, DWORD PTR ?DragFlagPloeSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	push	ebx
	push	ebx
	push	ebx
	push	eax
	call	edx
$LN42@GameRunnin:
; Line 280
	cmp	BYTE PTR ?isGettingCoin@@3_NA, bl	; isGettingCoin
	je	SHORT $LN1@GameRunnin
; Line 281
	mov	eax, DWORD PTR ?GoldCoinSound@@3VCDxSoundBuffer@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	push	ebx
	push	ebx
	push	ebx
	push	eax
	call	edx
	pop	esi
	pop	ebx
; Line 282
	jmp	?UpdateCoinPosition@@YAXXZ		; UpdateCoinPosition
$LN1@GameRunnin:
	pop	esi
	pop	ebx
; Line 285
	ret	0
?GameRunning@@YAXXZ ENDP				; GameRunning
; Function compile flags: /Ogtp
;	COMDAT ??__Eds@@YAXXZ
text$yc	SEGMENT
??__Eds@@YAXXZ PROC					; `dynamic initializer for 'ds'', COMDAT
; File c:\users\administrator\documents\visual studio 2010\projects\supermario__\supermario_\supermario\supermario.h
; Line 68
	push	OFFSET ??__Fds@@YAXXZ			; `dynamic atexit destructor for 'ds''
	call	_atexit
	pop	ecx
	ret	0
??__Eds@@YAXXZ ENDP					; `dynamic initializer for 'ds''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EBGSound@@YAXXZ
text$yc	SEGMENT
??__EBGSound@@YAXXZ PROC				; `dynamic initializer for 'BGSound'', COMDAT
; Line 69
	push	OFFSET ??__FBGSound@@YAXXZ		; `dynamic atexit destructor for 'BGSound''
	call	_atexit
	pop	ecx
	ret	0
??__EBGSound@@YAXXZ ENDP				; `dynamic initializer for 'BGSound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EJumpSound@@YAXXZ
text$yc	SEGMENT
??__EJumpSound@@YAXXZ PROC				; `dynamic initializer for 'JumpSound'', COMDAT
; Line 70
	push	OFFSET ??__FJumpSound@@YAXXZ		; `dynamic atexit destructor for 'JumpSound''
	call	_atexit
	pop	ecx
	ret	0
??__EJumpSound@@YAXXZ ENDP				; `dynamic initializer for 'JumpSound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EDeadSound@@YAXXZ
text$yc	SEGMENT
??__EDeadSound@@YAXXZ PROC				; `dynamic initializer for 'DeadSound'', COMDAT
; Line 71
	push	OFFSET ??__FDeadSound@@YAXXZ		; `dynamic atexit destructor for 'DeadSound''
	call	_atexit
	pop	ecx
	ret	0
??__EDeadSound@@YAXXZ ENDP				; `dynamic initializer for 'DeadSound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EGameTotallyEndSound@@YAXXZ
text$yc	SEGMENT
??__EGameTotallyEndSound@@YAXXZ PROC			; `dynamic initializer for 'GameTotallyEndSound'', COMDAT
; Line 72
	push	OFFSET ??__FGameTotallyEndSound@@YAXXZ	; `dynamic atexit destructor for 'GameTotallyEndSound''
	call	_atexit
	pop	ecx
	ret	0
??__EGameTotallyEndSound@@YAXXZ ENDP			; `dynamic initializer for 'GameTotallyEndSound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EGameOverSound@@YAXXZ
text$yc	SEGMENT
??__EGameOverSound@@YAXXZ PROC				; `dynamic initializer for 'GameOverSound'', COMDAT
; Line 73
	push	OFFSET ??__FGameOverSound@@YAXXZ	; `dynamic atexit destructor for 'GameOverSound''
	call	_atexit
	pop	ecx
	ret	0
??__EGameOverSound@@YAXXZ ENDP				; `dynamic initializer for 'GameOverSound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__ELevelEndSound@@YAXXZ
text$yc	SEGMENT
??__ELevelEndSound@@YAXXZ PROC				; `dynamic initializer for 'LevelEndSound'', COMDAT
; Line 74
	push	OFFSET ??__FLevelEndSound@@YAXXZ	; `dynamic atexit destructor for 'LevelEndSound''
	call	_atexit
	pop	ecx
	ret	0
??__ELevelEndSound@@YAXXZ ENDP				; `dynamic initializer for 'LevelEndSound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EDragFlagPloeSound@@YAXXZ
text$yc	SEGMENT
??__EDragFlagPloeSound@@YAXXZ PROC			; `dynamic initializer for 'DragFlagPloeSound'', COMDAT
; Line 75
	push	OFFSET ??__FDragFlagPloeSound@@YAXXZ	; `dynamic atexit destructor for 'DragFlagPloeSound''
	call	_atexit
	pop	ecx
	ret	0
??__EDragFlagPloeSound@@YAXXZ ENDP			; `dynamic initializer for 'DragFlagPloeSound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EStepOnEnemySound@@YAXXZ
text$yc	SEGMENT
??__EStepOnEnemySound@@YAXXZ PROC			; `dynamic initializer for 'StepOnEnemySound'', COMDAT
; Line 76
	push	OFFSET ??__FStepOnEnemySound@@YAXXZ	; `dynamic atexit destructor for 'StepOnEnemySound''
	call	_atexit
	pop	ecx
	ret	0
??__EStepOnEnemySound@@YAXXZ ENDP			; `dynamic initializer for 'StepOnEnemySound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EKnockBrickSound@@YAXXZ
text$yc	SEGMENT
??__EKnockBrickSound@@YAXXZ PROC			; `dynamic initializer for 'KnockBrickSound'', COMDAT
; Line 77
	push	OFFSET ??__FKnockBrickSound@@YAXXZ	; `dynamic atexit destructor for 'KnockBrickSound''
	call	_atexit
	pop	ecx
	ret	0
??__EKnockBrickSound@@YAXXZ ENDP			; `dynamic initializer for 'KnockBrickSound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EGoldCoinSound@@YAXXZ
text$yc	SEGMENT
??__EGoldCoinSound@@YAXXZ PROC				; `dynamic initializer for 'GoldCoinSound'', COMDAT
; Line 78
	push	OFFSET ??__FGoldCoinSound@@YAXXZ	; `dynamic atexit destructor for 'GoldCoinSound''
	call	_atexit
	pop	ecx
	ret	0
??__EGoldCoinSound@@YAXXZ ENDP				; `dynamic initializer for 'GoldCoinSound''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FGoldCoinSound@@YAXXZ
text$yd	SEGMENT
??__FGoldCoinSound@@YAXXZ PROC				; `dynamic atexit destructor for 'GoldCoinSound'', COMDAT
	mov	eax, DWORD PTR ?GoldCoinSound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic:
	ret	0
??__FGoldCoinSound@@YAXXZ ENDP				; `dynamic atexit destructor for 'GoldCoinSound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FKnockBrickSound@@YAXXZ
text$yd	SEGMENT
??__FKnockBrickSound@@YAXXZ PROC			; `dynamic atexit destructor for 'KnockBrickSound'', COMDAT
	mov	eax, DWORD PTR ?KnockBrickSound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic@2:
	ret	0
??__FKnockBrickSound@@YAXXZ ENDP			; `dynamic atexit destructor for 'KnockBrickSound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FStepOnEnemySound@@YAXXZ
text$yd	SEGMENT
??__FStepOnEnemySound@@YAXXZ PROC			; `dynamic atexit destructor for 'StepOnEnemySound'', COMDAT
	mov	eax, DWORD PTR ?StepOnEnemySound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic@3
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic@3:
	ret	0
??__FStepOnEnemySound@@YAXXZ ENDP			; `dynamic atexit destructor for 'StepOnEnemySound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FDragFlagPloeSound@@YAXXZ
text$yd	SEGMENT
??__FDragFlagPloeSound@@YAXXZ PROC			; `dynamic atexit destructor for 'DragFlagPloeSound'', COMDAT
	mov	eax, DWORD PTR ?DragFlagPloeSound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic@4
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic@4:
	ret	0
??__FDragFlagPloeSound@@YAXXZ ENDP			; `dynamic atexit destructor for 'DragFlagPloeSound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FLevelEndSound@@YAXXZ
text$yd	SEGMENT
??__FLevelEndSound@@YAXXZ PROC				; `dynamic atexit destructor for 'LevelEndSound'', COMDAT
	mov	eax, DWORD PTR ?LevelEndSound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic@5
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic@5:
	ret	0
??__FLevelEndSound@@YAXXZ ENDP				; `dynamic atexit destructor for 'LevelEndSound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FGameOverSound@@YAXXZ
text$yd	SEGMENT
??__FGameOverSound@@YAXXZ PROC				; `dynamic atexit destructor for 'GameOverSound'', COMDAT
	mov	eax, DWORD PTR ?GameOverSound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic@6
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic@6:
	ret	0
??__FGameOverSound@@YAXXZ ENDP				; `dynamic atexit destructor for 'GameOverSound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FGameTotallyEndSound@@YAXXZ
text$yd	SEGMENT
??__FGameTotallyEndSound@@YAXXZ PROC			; `dynamic atexit destructor for 'GameTotallyEndSound'', COMDAT
	mov	eax, DWORD PTR ?GameTotallyEndSound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic@7
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic@7:
	ret	0
??__FGameTotallyEndSound@@YAXXZ ENDP			; `dynamic atexit destructor for 'GameTotallyEndSound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FDeadSound@@YAXXZ
text$yd	SEGMENT
??__FDeadSound@@YAXXZ PROC				; `dynamic atexit destructor for 'DeadSound'', COMDAT
	mov	eax, DWORD PTR ?DeadSound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic@8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic@8:
	ret	0
??__FDeadSound@@YAXXZ ENDP				; `dynamic atexit destructor for 'DeadSound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FJumpSound@@YAXXZ
text$yd	SEGMENT
??__FJumpSound@@YAXXZ PROC				; `dynamic atexit destructor for 'JumpSound'', COMDAT
	mov	eax, DWORD PTR ?JumpSound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic@9
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic@9:
	ret	0
??__FJumpSound@@YAXXZ ENDP				; `dynamic atexit destructor for 'JumpSound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FBGSound@@YAXXZ
text$yd	SEGMENT
??__FBGSound@@YAXXZ PROC				; `dynamic atexit destructor for 'BGSound'', COMDAT
	mov	eax, DWORD PTR ?BGSound@@3VCDxSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN3@dynamic@10
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	eax
	call	edx
$LN3@dynamic@10:
	ret	0
??__FBGSound@@YAXXZ ENDP				; `dynamic atexit destructor for 'BGSound''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__Fds@@YAXXZ
text$yd	SEGMENT
??__Fds@@YAXXZ PROC					; `dynamic atexit destructor for 'ds'', COMDAT
	jmp	??1CDxSound@@QAE@XZ			; CDxSound::~CDxSound
??__Fds@@YAXXZ ENDP					; `dynamic atexit destructor for 'ds''
PUBLIC	?DeadSound@@3VCDxSoundBuffer@@A			; DeadSound
PUBLIC	?KnockBrickSound@@3VCDxSoundBuffer@@A		; KnockBrickSound
PUBLIC	?JumpSound@@3VCDxSoundBuffer@@A			; JumpSound
PUBLIC	?StepOnEnemySound@@3VCDxSoundBuffer@@A		; StepOnEnemySound
PUBLIC	?BGSound@@3VCDxSoundBuffer@@A			; BGSound
PUBLIC	?GoldCoinSound@@3VCDxSoundBuffer@@A		; GoldCoinSound
PUBLIC	?GameOverSound@@3VCDxSoundBuffer@@A		; GameOverSound
PUBLIC	?DragFlagPloeSound@@3VCDxSoundBuffer@@A		; DragFlagPloeSound
PUBLIC	?LevelEndSound@@3VCDxSoundBuffer@@A		; LevelEndSound
PUBLIC	?GameTotallyEndSound@@3VCDxSoundBuffer@@A	; GameTotallyEndSound
PUBLIC	?ds@@3VCDxSound@@A				; ds
?DeadSound@@3VCDxSoundBuffer@@A DB 010H DUP (?)		; DeadSound
?KnockBrickSound@@3VCDxSoundBuffer@@A DB 010H DUP (?)	; KnockBrickSound
?JumpSound@@3VCDxSoundBuffer@@A DB 010H DUP (?)		; JumpSound
?StepOnEnemySound@@3VCDxSoundBuffer@@A DB 010H DUP (?)	; StepOnEnemySound
?BGSound@@3VCDxSoundBuffer@@A DB 010H DUP (?)		; BGSound
?GoldCoinSound@@3VCDxSoundBuffer@@A DB 010H DUP (?)	; GoldCoinSound
?GameOverSound@@3VCDxSoundBuffer@@A DB 010H DUP (?)	; GameOverSound
?DragFlagPloeSound@@3VCDxSoundBuffer@@A DB 010H DUP (?)	; DragFlagPloeSound
?LevelEndSound@@3VCDxSoundBuffer@@A DB 010H DUP (?)	; LevelEndSound
?GameTotallyEndSound@@3VCDxSoundBuffer@@A DB 010H DUP (?) ; GameTotallyEndSound
?ds@@3VCDxSound@@A DB 014H DUP (?)			; ds
_ds$initializer$ DD FLAT:??__Eds@@YAXXZ
_BGSound$initializer$ DD FLAT:??__EBGSound@@YAXXZ
_JumpSound$initializer$ DD FLAT:??__EJumpSound@@YAXXZ
_DeadSound$initializer$ DD FLAT:??__EDeadSound@@YAXXZ
_GameTotallyEndSound$initializer$ DD FLAT:??__EGameTotallyEndSound@@YAXXZ
_GameOverSound$initializer$ DD FLAT:??__EGameOverSound@@YAXXZ
_LevelEndSound$initializer$ DD FLAT:??__ELevelEndSound@@YAXXZ
_DragFlagPloeSound$initializer$ DD FLAT:??__EDragFlagPloeSound@@YAXXZ
_StepOnEnemySound$initializer$ DD FLAT:??__EStepOnEnemySound@@YAXXZ
_KnockBrickSound$initializer$ DD FLAT:??__EKnockBrickSound@@YAXXZ
_GoldCoinSound$initializer$ DD FLAT:??__EGoldCoinSound@@YAXXZ
END
